
Demo_BTLNhung.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000255c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08002668  08002668  00003668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002764  08002764  00004030  2**0
                  CONTENTS
  4 .ARM          00000000  08002764  08002764  00004030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002764  08002764  00004030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002764  08002764  00003764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002768  08002768  00003768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  0800276c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000030  0800279c  00004030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  0800279c  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079cd  00000000  00000000  00004059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001691  00000000  00000000  0000ba26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0000d0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000794  00000000  00000000  0000da90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001732c  00000000  00000000  0000e224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8b5  00000000  00000000  00025550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ac5  00000000  00000000  0002fe05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b78ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002868  00000000  00000000  000b7910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000ba178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002650 	.word	0x08002650

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002650 	.word	0x08002650

0800014c <Reset_LCD.0>:
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

     // RESTART WITH LCD.
     void Reset_LCD(){   //DEFAULT SCREEN.
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	f8c7 c004 	str.w	ip, [r7, #4]
       x = 1 ;
 8000156:	4b17      	ldr	r3, [pc, #92]	@ (80001b4 <Reset_LCD.0+0x68>)
 8000158:	2201      	movs	r2, #1
 800015a:	601a      	str	r2, [r3, #0]
       y = 9 ;
 800015c:	4b16      	ldr	r3, [pc, #88]	@ (80001b8 <Reset_LCD.0+0x6c>)
 800015e:	2209      	movs	r2, #9
 8000160:	601a      	str	r2, [r3, #0]
       LCD_Init();
 8000162:	f000 fef9 	bl	8000f58 <LCD_Init>
       LCD_SetCursor(0,4);
 8000166:	2104      	movs	r1, #4
 8000168:	2000      	movs	r0, #0
 800016a:	f000 ff2d 	bl	8000fc8 <LCD_SetCursor>
	   LCD_Print("WELLCOME!");
 800016e:	4813      	ldr	r0, [pc, #76]	@ (80001bc <Reset_LCD.0+0x70>)
 8000170:	f000 ff0b 	bl	8000f8a <LCD_Print>
	   HAL_Delay(5);
 8000174:	2005      	movs	r0, #5
 8000176:	f001 f859 	bl	800122c <HAL_Delay>
	   LCD_SetCursor(1,0);
 800017a:	2100      	movs	r1, #0
 800017c:	2001      	movs	r0, #1
 800017e:	f000 ff23 	bl	8000fc8 <LCD_SetCursor>
	   LCD_Print("PASSCODE:");
 8000182:	480f      	ldr	r0, [pc, #60]	@ (80001c0 <Reset_LCD.0+0x74>)
 8000184:	f000 ff01 	bl	8000f8a <LCD_Print>
	   LCD_SetCursor(1,9);
 8000188:	2109      	movs	r1, #9
 800018a:	2001      	movs	r0, #1
 800018c:	f000 ff1c 	bl	8000fc8 <LCD_SetCursor>
	   LCD_CursorBlink();
 8000190:	f000 ff36 	bl	8001000 <LCD_CursorBlink>
	   count = 0;
 8000194:	4b0b      	ldr	r3, [pc, #44]	@ (80001c4 <Reset_LCD.0+0x78>)
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
    	x = 1 ;
 800019a:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <Reset_LCD.0+0x68>)
 800019c:	2201      	movs	r2, #1
 800019e:	601a      	str	r2, [r3, #0]
        y = 9 ;
 80001a0:	4b05      	ldr	r3, [pc, #20]	@ (80001b8 <Reset_LCD.0+0x6c>)
 80001a2:	2209      	movs	r2, #9
 80001a4:	601a      	str	r2, [r3, #0]
        Check_Mode = 0;
 80001a6:	4b08      	ldr	r3, [pc, #32]	@ (80001c8 <Reset_LCD.0+0x7c>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	601a      	str	r2, [r3, #0]
     }
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000018 	.word	0x20000018
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	08002668 	.word	0x08002668
 80001c0:	08002674 	.word	0x08002674
 80001c4:	20000064 	.word	0x20000064
 80001c8:	20000074 	.word	0x20000074

080001cc <main>:
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
int main(void)
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80001d8:	f000 ffc6 	bl	8001168 <HAL_Init>
  SystemClock_Config();
 80001dc:	f000 fd0e 	bl	8000bfc <SystemClock_Config>
  MX_GPIO_Init();
 80001e0:	f000 fdb6 	bl	8000d50 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001e4:	f000 fd50 	bl	8000c88 <MX_TIM2_Init>
		              	  Reset_LCD();
		                    }
		                 }
                   return key;
	  }
	  Reset_LCD();
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	469c      	mov	ip, r3
 80001ec:	f7ff ffae 	bl	800014c <Reset_LCD.0>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
   KeyPad();
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	469c      	mov	ip, r3
 80001f4:	f000 fa14 	bl	8000620 <KeyPad.1>
 80001f8:	e7fa      	b.n	80001f0 <main+0x24>
	...

080001fc <Read_Keypad.2>:
	  void Read_Keypad(int key){
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	f8c7 c000 	str.w	ip, [r7]
	  	if(count < 6){
 8000208:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <Read_Keypad.2+0x34>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2b05      	cmp	r3, #5
 800020e:	dc0a      	bgt.n	8000226 <Read_Keypad.2+0x2a>
	  	    enter_passcode[count] = key;
 8000210:	4b07      	ldr	r3, [pc, #28]	@ (8000230 <Read_Keypad.2+0x34>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4907      	ldr	r1, [pc, #28]	@ (8000234 <Read_Keypad.2+0x38>)
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  	    count++;
 800021c:	4b04      	ldr	r3, [pc, #16]	@ (8000230 <Read_Keypad.2+0x34>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	3301      	adds	r3, #1
 8000222:	4a03      	ldr	r2, [pc, #12]	@ (8000230 <Read_Keypad.2+0x34>)
 8000224:	6013      	str	r3, [r2, #0]
	  }
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	20000064 	.word	0x20000064
 8000234:	2000004c 	.word	0x2000004c

08000238 <Default_Change_Screen.6>:
	  void Default_Change_Screen(){
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	f8c7 c004 	str.w	ip, [r7, #4]
		  Check_Mode = 1;
 8000242:	4b13      	ldr	r3, [pc, #76]	@ (8000290 <Default_Change_Screen.6+0x58>)
 8000244:	2201      	movs	r2, #1
 8000246:	601a      	str	r2, [r3, #0]
		  count = 0;
 8000248:	4b12      	ldr	r3, [pc, #72]	@ (8000294 <Default_Change_Screen.6+0x5c>)
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
		  LCD_Clear();
 800024e:	f000 feb1 	bl	8000fb4 <LCD_Clear>
		  LCD_Print("Waiting...");
 8000252:	4811      	ldr	r0, [pc, #68]	@ (8000298 <Default_Change_Screen.6+0x60>)
 8000254:	f000 fe99 	bl	8000f8a <LCD_Print>
		  LCD_DisableCursorBlink();
 8000258:	f000 fed9 	bl	800100e <LCD_DisableCursorBlink>
		  HAL_Delay(100);
 800025c:	2064      	movs	r0, #100	@ 0x64
 800025e:	f000 ffe5 	bl	800122c <HAL_Delay>
		  LCD_Clear();
 8000262:	f000 fea7 	bl	8000fb4 <LCD_Clear>
		  LCD_SetCursor(0,0);
 8000266:	2100      	movs	r1, #0
 8000268:	2000      	movs	r0, #0
 800026a:	f000 fead 	bl	8000fc8 <LCD_SetCursor>
		  LCD_Print("Enter Old Pass");
 800026e:	480b      	ldr	r0, [pc, #44]	@ (800029c <Default_Change_Screen.6+0x64>)
 8000270:	f000 fe8b 	bl	8000f8a <LCD_Print>
		  LCD_SetCursor(1,0);
 8000274:	2100      	movs	r1, #0
 8000276:	2001      	movs	r0, #1
 8000278:	f000 fea6 	bl	8000fc8 <LCD_SetCursor>
		  LCD_Print("=>");
 800027c:	4808      	ldr	r0, [pc, #32]	@ (80002a0 <Default_Change_Screen.6+0x68>)
 800027e:	f000 fe84 	bl	8000f8a <LCD_Print>
		  LCD_CursorBlink();
 8000282:	f000 febd 	bl	8001000 <LCD_CursorBlink>
	  }
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000074 	.word	0x20000074
 8000294:	20000064 	.word	0x20000064
 8000298:	08002680 	.word	0x08002680
 800029c:	0800268c 	.word	0x0800268c
 80002a0:	0800269c 	.word	0x0800269c

080002a4 <Read_OldPass.8>:
	  void Read_OldPass(int key){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	f8c7 c000 	str.w	ip, [r7]
	  	  if(count1 < 6){
 80002b0:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <Read_OldPass.8+0x38>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b05      	cmp	r3, #5
 80002b6:	dc0c      	bgt.n	80002d2 <Read_OldPass.8+0x2e>
	  	  	 enter_passcode[count1] = key;
 80002b8:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <Read_OldPass.8+0x38>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4908      	ldr	r1, [pc, #32]	@ (80002e0 <Read_OldPass.8+0x3c>)
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  	  	 count1 = count++;
 80002c4:	4b07      	ldr	r3, [pc, #28]	@ (80002e4 <Read_OldPass.8+0x40>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	1c5a      	adds	r2, r3, #1
 80002ca:	4906      	ldr	r1, [pc, #24]	@ (80002e4 <Read_OldPass.8+0x40>)
 80002cc:	600a      	str	r2, [r1, #0]
 80002ce:	4a03      	ldr	r2, [pc, #12]	@ (80002dc <Read_OldPass.8+0x38>)
 80002d0:	6013      	str	r3, [r2, #0]
	  	  }
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	200000c0 	.word	0x200000c0
 80002e0:	2000004c 	.word	0x2000004c
 80002e4:	20000064 	.word	0x20000064

080002e8 <Enter_Old_Passcode.7>:
	  void Enter_Old_Passcode(){
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4664      	mov	r4, ip
 80002f0:	f8c7 c004 	str.w	ip, [r7, #4]
		  x = 1;
 80002f4:	4b11      	ldr	r3, [pc, #68]	@ (800033c <Enter_Old_Passcode.7+0x54>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	601a      	str	r2, [r3, #0]
		  y = 2;
 80002fa:	4b11      	ldr	r3, [pc, #68]	@ (8000340 <Enter_Old_Passcode.7+0x58>)
 80002fc:	2202      	movs	r2, #2
 80002fe:	601a      	str	r2, [r3, #0]
		  for(int i=0; i<6; i++){
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	e012      	b.n	800032c <Enter_Old_Passcode.7+0x44>
		    LCD_SetCursor(x,y);
 8000306:	4b0d      	ldr	r3, [pc, #52]	@ (800033c <Enter_Old_Passcode.7+0x54>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	b2db      	uxtb	r3, r3
 800030c:	4a0c      	ldr	r2, [pc, #48]	@ (8000340 <Enter_Old_Passcode.7+0x58>)
 800030e:	6812      	ldr	r2, [r2, #0]
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	4611      	mov	r1, r2
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fe57 	bl	8000fc8 <LCD_SetCursor>
		    Read_OldPass(key);
 800031a:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <Enter_Old_Passcode.7+0x5c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	46a4      	mov	ip, r4
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ffbf 	bl	80002a4 <Read_OldPass.8>
		  for(int i=0; i<6; i++){
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	3301      	adds	r3, #1
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	2b05      	cmp	r3, #5
 8000330:	dde9      	ble.n	8000306 <Enter_Old_Passcode.7+0x1e>
	  }
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	3714      	adds	r7, #20
 8000338:	46bd      	mov	sp, r7
 800033a:	bd90      	pop	{r4, r7, pc}
 800033c:	20000018 	.word	0x20000018
 8000340:	2000001c 	.word	0x2000001c
 8000344:	20000068 	.word	0x20000068

08000348 <Change_Passcode.5>:
	  void Change_Passcode(){
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4664      	mov	r4, ip
 8000350:	f8c7 c004 	str.w	ip, [r7, #4]
		  Default_Change_Screen();
 8000354:	46a4      	mov	ip, r4
 8000356:	f7ff ff6f 	bl	8000238 <Default_Change_Screen.6>
		  Enter_Old_Passcode();
 800035a:	46a4      	mov	ip, r4
 800035c:	f7ff ffc4 	bl	80002e8 <Enter_Old_Passcode.7>
	  }
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bd90      	pop	{r4, r7, pc}

08000368 <Check_Old_Passcode.3>:
	  void Check_Old_Passcode(){
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	4664      	mov	r4, ip
 8000370:	f8c7 c004 	str.w	ip, [r7, #4]
		  check_old = 1;
 8000374:	4b2c      	ldr	r3, [pc, #176]	@ (8000428 <Check_Old_Passcode.3+0xc0>)
 8000376:	2201      	movs	r2, #1
 8000378:	601a      	str	r2, [r3, #0]
		  for(int i = 0; i < 6; i++){
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	e01f      	b.n	80003c0 <Check_Old_Passcode.3+0x58>
		  	 if(passcode[i] != enter_passcode[i]){
 8000380:	4a2a      	ldr	r2, [pc, #168]	@ (800042c <Check_Old_Passcode.3+0xc4>)
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000388:	4929      	ldr	r1, [pc, #164]	@ (8000430 <Check_Old_Passcode.3+0xc8>)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000390:	429a      	cmp	r2, r3
 8000392:	d003      	beq.n	800039c <Check_Old_Passcode.3+0x34>
		  	    check_old  =  0;
 8000394:	4b24      	ldr	r3, [pc, #144]	@ (8000428 <Check_Old_Passcode.3+0xc0>)
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
		  	  	break;
 800039a:	e014      	b.n	80003c6 <Check_Old_Passcode.3+0x5e>
		  	 }else if(count < 5 || count > 6){
 800039c:	4b25      	ldr	r3, [pc, #148]	@ (8000434 <Check_Old_Passcode.3+0xcc>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b04      	cmp	r3, #4
 80003a2:	dd03      	ble.n	80003ac <Check_Old_Passcode.3+0x44>
 80003a4:	4b23      	ldr	r3, [pc, #140]	@ (8000434 <Check_Old_Passcode.3+0xcc>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	dd03      	ble.n	80003b4 <Check_Old_Passcode.3+0x4c>
		  	  	   check_old = 0;
 80003ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000428 <Check_Old_Passcode.3+0xc0>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
		  	  	   break;
 80003b2:	e008      	b.n	80003c6 <Check_Old_Passcode.3+0x5e>
		    	  check_old = 1;
 80003b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000428 <Check_Old_Passcode.3+0xc0>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	601a      	str	r2, [r3, #0]
		  for(int i = 0; i < 6; i++){
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	3301      	adds	r3, #1
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	2b05      	cmp	r3, #5
 80003c4:	dddc      	ble.n	8000380 <Check_Old_Passcode.3+0x18>
		  if(check_old != 1){
 80003c6:	4b18      	ldr	r3, [pc, #96]	@ (8000428 <Check_Old_Passcode.3+0xc0>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d018      	beq.n	8000400 <Check_Old_Passcode.3+0x98>
			LCD_Clear();
 80003ce:	f000 fdf1 	bl	8000fb4 <LCD_Clear>
			LCD_SetCursor(0,1);
 80003d2:	2101      	movs	r1, #1
 80003d4:	2000      	movs	r0, #0
 80003d6:	f000 fdf7 	bl	8000fc8 <LCD_SetCursor>
			LCD_Print("FALSE,");
 80003da:	4817      	ldr	r0, [pc, #92]	@ (8000438 <Check_Old_Passcode.3+0xd0>)
 80003dc:	f000 fdd5 	bl	8000f8a <LCD_Print>
			LCD_SetCursor(1,1);
 80003e0:	2101      	movs	r1, #1
 80003e2:	2001      	movs	r0, #1
 80003e4:	f000 fdf0 	bl	8000fc8 <LCD_SetCursor>
			LCD_Print("PLEASE AGAIN !");
 80003e8:	4814      	ldr	r0, [pc, #80]	@ (800043c <Check_Old_Passcode.3+0xd4>)
 80003ea:	f000 fdce 	bl	8000f8a <LCD_Print>
			LCD_DisableCursorBlink();
 80003ee:	f000 fe0e 	bl	800100e <LCD_DisableCursorBlink>
			HAL_Delay(100);
 80003f2:	2064      	movs	r0, #100	@ 0x64
 80003f4:	f000 ff1a 	bl	800122c <HAL_Delay>
			Change_Passcode();
 80003f8:	46a4      	mov	ip, r4
 80003fa:	f7ff ffa5 	bl	8000348 <Change_Passcode.5>
	  }
 80003fe:	e00f      	b.n	8000420 <Check_Old_Passcode.3+0xb8>
			  LCD_Clear();
 8000400:	f000 fdd8 	bl	8000fb4 <LCD_Clear>
			  LCD_SetCursor(0,1);
 8000404:	2101      	movs	r1, #1
 8000406:	2000      	movs	r0, #0
 8000408:	f000 fdde 	bl	8000fc8 <LCD_SetCursor>
			  LCD_Print("Enter New Pass");
 800040c:	480c      	ldr	r0, [pc, #48]	@ (8000440 <Check_Old_Passcode.3+0xd8>)
 800040e:	f000 fdbc 	bl	8000f8a <LCD_Print>
			  LCD_SetCursor(1,1);
 8000412:	2101      	movs	r1, #1
 8000414:	2001      	movs	r0, #1
 8000416:	f000 fdd7 	bl	8000fc8 <LCD_SetCursor>
			  LCD_Print("=>");
 800041a:	480a      	ldr	r0, [pc, #40]	@ (8000444 <Check_Old_Passcode.3+0xdc>)
 800041c:	f000 fdb5 	bl	8000f8a <LCD_Print>
	  }
 8000420:	bf00      	nop
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	bd90      	pop	{r4, r7, pc}
 8000428:	20000070 	.word	0x20000070
 800042c:	20000000 	.word	0x20000000
 8000430:	2000004c 	.word	0x2000004c
 8000434:	20000064 	.word	0x20000064
 8000438:	080026a0 	.word	0x080026a0
 800043c:	080026a8 	.word	0x080026a8
 8000440:	080026b8 	.word	0x080026b8
 8000444:	0800269c 	.word	0x0800269c

08000448 <Xu_Ly_Mat_Khau.4>:
	  void Xu_Ly_Mat_Khau(){
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	4664      	mov	r4, ip
 8000450:	f8c7 c004 	str.w	ip, [r7, #4]
		  check = 1;
 8000454:	4b66      	ldr	r3, [pc, #408]	@ (80005f0 <Xu_Ly_Mat_Khau.4+0x1a8>)
 8000456:	2201      	movs	r2, #1
 8000458:	601a      	str	r2, [r3, #0]
	  	for(int i = 0; i < 6; i++){
 800045a:	2300      	movs	r3, #0
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	e01c      	b.n	800049a <Xu_Ly_Mat_Khau.4+0x52>
	  	  if(passcode[i] != enter_passcode[i]){
 8000460:	4a64      	ldr	r2, [pc, #400]	@ (80005f4 <Xu_Ly_Mat_Khau.4+0x1ac>)
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000468:	4963      	ldr	r1, [pc, #396]	@ (80005f8 <Xu_Ly_Mat_Khau.4+0x1b0>)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000470:	429a      	cmp	r2, r3
 8000472:	d003      	beq.n	800047c <Xu_Ly_Mat_Khau.4+0x34>
	  		check  =  0;
 8000474:	4b5e      	ldr	r3, [pc, #376]	@ (80005f0 <Xu_Ly_Mat_Khau.4+0x1a8>)
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
	  		break;
 800047a:	e011      	b.n	80004a0 <Xu_Ly_Mat_Khau.4+0x58>
	  		}if(count < 5 || count > 6){
 800047c:	4b5f      	ldr	r3, [pc, #380]	@ (80005fc <Xu_Ly_Mat_Khau.4+0x1b4>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b04      	cmp	r3, #4
 8000482:	dd03      	ble.n	800048c <Xu_Ly_Mat_Khau.4+0x44>
 8000484:	4b5d      	ldr	r3, [pc, #372]	@ (80005fc <Xu_Ly_Mat_Khau.4+0x1b4>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b06      	cmp	r3, #6
 800048a:	dd03      	ble.n	8000494 <Xu_Ly_Mat_Khau.4+0x4c>
	  		   check = 0;
 800048c:	4b58      	ldr	r3, [pc, #352]	@ (80005f0 <Xu_Ly_Mat_Khau.4+0x1a8>)
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
	  		   break;
 8000492:	e005      	b.n	80004a0 <Xu_Ly_Mat_Khau.4+0x58>
	  	for(int i = 0; i < 6; i++){
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	3301      	adds	r3, #1
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	2b05      	cmp	r3, #5
 800049e:	dddf      	ble.n	8000460 <Xu_Ly_Mat_Khau.4+0x18>
	  	if(check != 1){
 80004a0:	4b53      	ldr	r3, [pc, #332]	@ (80005f0 <Xu_Ly_Mat_Khau.4+0x1a8>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d043      	beq.n	8000530 <Xu_Ly_Mat_Khau.4+0xe8>
	  		LCD_Clear();
 80004a8:	f000 fd84 	bl	8000fb4 <LCD_Clear>
	  		GPIOB -> BSRR = (1 << 11);
 80004ac:	4b54      	ldr	r3, [pc, #336]	@ (8000600 <Xu_Ly_Mat_Khau.4+0x1b8>)
 80004ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80004b2:	611a      	str	r2, [r3, #16]
	  		GPIOA -> BSRR = (1 << 2);
 80004b4:	4b53      	ldr	r3, [pc, #332]	@ (8000604 <Xu_Ly_Mat_Khau.4+0x1bc>)
 80004b6:	2204      	movs	r2, #4
 80004b8:	611a      	str	r2, [r3, #16]
	  	    HAL_Delay(500);
 80004ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004be:	f000 feb5 	bl	800122c <HAL_Delay>
	  		GPIOA -> BSRR = (1 << 18);
 80004c2:	4b50      	ldr	r3, [pc, #320]	@ (8000604 <Xu_Ly_Mat_Khau.4+0x1bc>)
 80004c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80004c8:	611a      	str	r2, [r3, #16]
	  	    LCD_SetCursor(0, 5);
 80004ca:	2105      	movs	r1, #5
 80004cc:	2000      	movs	r0, #0
 80004ce:	f000 fd7b 	bl	8000fc8 <LCD_SetCursor>
	  	    LCD_Print("FAIL,");
 80004d2:	484d      	ldr	r0, [pc, #308]	@ (8000608 <Xu_Ly_Mat_Khau.4+0x1c0>)
 80004d4:	f000 fd59 	bl	8000f8a <LCD_Print>
	  		LCD_SetCursor(1, 1);
 80004d8:	2101      	movs	r1, #1
 80004da:	2001      	movs	r0, #1
 80004dc:	f000 fd74 	bl	8000fc8 <LCD_SetCursor>
	  		LCD_Print("PLEASE AGAIN!");
 80004e0:	484a      	ldr	r0, [pc, #296]	@ (800060c <Xu_Ly_Mat_Khau.4+0x1c4>)
 80004e2:	f000 fd52 	bl	8000f8a <LCD_Print>
	  		LCD_DisableCursorBlink();
 80004e6:	f000 fd92 	bl	800100e <LCD_DisableCursorBlink>
	  		HAL_Delay(100);
 80004ea:	2064      	movs	r0, #100	@ 0x64
 80004ec:	f000 fe9e 	bl	800122c <HAL_Delay>
	  		GPIOB -> BSRR = (1 << 27);
 80004f0:	4b43      	ldr	r3, [pc, #268]	@ (8000600 <Xu_Ly_Mat_Khau.4+0x1b8>)
 80004f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80004f6:	611a      	str	r2, [r3, #16]
	  		False_Passcode--;
 80004f8:	4b45      	ldr	r3, [pc, #276]	@ (8000610 <Xu_Ly_Mat_Khau.4+0x1c8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	3b01      	subs	r3, #1
 80004fe:	4a44      	ldr	r2, [pc, #272]	@ (8000610 <Xu_Ly_Mat_Khau.4+0x1c8>)
 8000500:	6013      	str	r3, [r2, #0]
	  		if(False_Passcode == 0){
 8000502:	4b43      	ldr	r3, [pc, #268]	@ (8000610 <Xu_Ly_Mat_Khau.4+0x1c8>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d10e      	bne.n	8000528 <Xu_Ly_Mat_Khau.4+0xe0>
	  			LCD_Clear();
 800050a:	f000 fd53 	bl	8000fb4 <LCD_Clear>
	  			LCD_SetCursor(0, 0);
 800050e:	2100      	movs	r1, #0
 8000510:	2000      	movs	r0, #0
 8000512:	f000 fd59 	bl	8000fc8 <LCD_SetCursor>
	  		    LCD_Print("WAITING FOR 30s");
 8000516:	483f      	ldr	r0, [pc, #252]	@ (8000614 <Xu_Ly_Mat_Khau.4+0x1cc>)
 8000518:	f000 fd37 	bl	8000f8a <LCD_Print>
	  		    HAL_Delay(100);
 800051c:	2064      	movs	r0, #100	@ 0x64
 800051e:	f000 fe85 	bl	800122c <HAL_Delay>
	  		    False_Passcode = 3;
 8000522:	4b3b      	ldr	r3, [pc, #236]	@ (8000610 <Xu_Ly_Mat_Khau.4+0x1c8>)
 8000524:	2203      	movs	r2, #3
 8000526:	601a      	str	r2, [r3, #0]
	   		Reset_LCD();
 8000528:	46a4      	mov	ip, r4
 800052a:	f7ff fe0f 	bl	800014c <Reset_LCD.0>
	  }
 800052e:	e05b      	b.n	80005e8 <Xu_Ly_Mat_Khau.4+0x1a0>
	  		GPIOB -> BSRR = (1 << 10);
 8000530:	4b33      	ldr	r3, [pc, #204]	@ (8000600 <Xu_Ly_Mat_Khau.4+0x1b8>)
 8000532:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000536:	611a      	str	r2, [r3, #16]
	  		GPIOA -> BSRR = (1 << 2);
 8000538:	4b32      	ldr	r3, [pc, #200]	@ (8000604 <Xu_Ly_Mat_Khau.4+0x1bc>)
 800053a:	2204      	movs	r2, #4
 800053c:	611a      	str	r2, [r3, #16]
	  		HAL_Delay(10);
 800053e:	200a      	movs	r0, #10
 8000540:	f000 fe74 	bl	800122c <HAL_Delay>
	  		GPIOA -> BSRR = (1 << 18);
 8000544:	4b2f      	ldr	r3, [pc, #188]	@ (8000604 <Xu_Ly_Mat_Khau.4+0x1bc>)
 8000546:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800054a:	611a      	str	r2, [r3, #16]
	  		HAL_Delay(10);
 800054c:	200a      	movs	r0, #10
 800054e:	f000 fe6d 	bl	800122c <HAL_Delay>
	  		GPIOA -> BSRR = (1 << 2);
 8000552:	4b2c      	ldr	r3, [pc, #176]	@ (8000604 <Xu_Ly_Mat_Khau.4+0x1bc>)
 8000554:	2204      	movs	r2, #4
 8000556:	611a      	str	r2, [r3, #16]
	  	    HAL_Delay(10);
 8000558:	200a      	movs	r0, #10
 800055a:	f000 fe67 	bl	800122c <HAL_Delay>
	  	    GPIOA -> BSRR = (1 << 18);
 800055e:	4b29      	ldr	r3, [pc, #164]	@ (8000604 <Xu_Ly_Mat_Khau.4+0x1bc>)
 8000560:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000564:	611a      	str	r2, [r3, #16]
	  	    HAL_Delay(10);
 8000566:	200a      	movs	r0, #10
 8000568:	f000 fe60 	bl	800122c <HAL_Delay>
	  	    GPIOA -> BSRR = (1 << 2);
 800056c:	4b25      	ldr	r3, [pc, #148]	@ (8000604 <Xu_Ly_Mat_Khau.4+0x1bc>)
 800056e:	2204      	movs	r2, #4
 8000570:	611a      	str	r2, [r3, #16]
	  	  	HAL_Delay(10);
 8000572:	200a      	movs	r0, #10
 8000574:	f000 fe5a 	bl	800122c <HAL_Delay>
	  	  	GPIOA -> BSRR = (1 << 18);
 8000578:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <Xu_Ly_Mat_Khau.4+0x1bc>)
 800057a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800057e:	611a      	str	r2, [r3, #16]
	  	    HAL_Delay(10);
 8000580:	200a      	movs	r0, #10
 8000582:	f000 fe53 	bl	800122c <HAL_Delay>
	  	  	GPIOA -> BSRR = (1 << 2);
 8000586:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <Xu_Ly_Mat_Khau.4+0x1bc>)
 8000588:	2204      	movs	r2, #4
 800058a:	611a      	str	r2, [r3, #16]
	  	  	HAL_Delay(10);
 800058c:	200a      	movs	r0, #10
 800058e:	f000 fe4d 	bl	800122c <HAL_Delay>
	  	  	GPIOA -> BSRR = (1 << 18);
 8000592:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <Xu_Ly_Mat_Khau.4+0x1bc>)
 8000594:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000598:	611a      	str	r2, [r3, #16]
	  		LCD_Clear();
 800059a:	f000 fd0b 	bl	8000fb4 <LCD_Clear>
	  		LCD_SetCursor(0, 2);
 800059e:	2102      	movs	r1, #2
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 fd11 	bl	8000fc8 <LCD_SetCursor>
	  		LCD_Print("HiHi,SUCCESS!!");
 80005a6:	481c      	ldr	r0, [pc, #112]	@ (8000618 <Xu_Ly_Mat_Khau.4+0x1d0>)
 80005a8:	f000 fcef 	bl	8000f8a <LCD_Print>
	  		LCD_SetCursor(1, 3);
 80005ac:	2103      	movs	r1, #3
 80005ae:	2001      	movs	r0, #1
 80005b0:	f000 fd0a 	bl	8000fc8 <LCD_SetCursor>
	  		LCD_Print("WELLCOME!!!");
 80005b4:	4819      	ldr	r0, [pc, #100]	@ (800061c <Xu_Ly_Mat_Khau.4+0x1d4>)
 80005b6:	f000 fce8 	bl	8000f8a <LCD_Print>
	  		LCD_DisableCursorBlink();
 80005ba:	f000 fd28 	bl	800100e <LCD_DisableCursorBlink>
	  		GPIOA -> BSRR = (1 << 3);
 80005be:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <Xu_Ly_Mat_Khau.4+0x1bc>)
 80005c0:	2208      	movs	r2, #8
 80005c2:	611a      	str	r2, [r3, #16]
	  		HAL_Delay(300);
 80005c4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80005c8:	f000 fe30 	bl	800122c <HAL_Delay>
	  		GPIOA -> BSRR = (1 << 19);
 80005cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <Xu_Ly_Mat_Khau.4+0x1bc>)
 80005ce:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80005d2:	611a      	str	r2, [r3, #16]
	  		GPIOB -> BSRR = (1 << 26);
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <Xu_Ly_Mat_Khau.4+0x1b8>)
 80005d6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80005da:	611a      	str	r2, [r3, #16]
	  		False_Passcode = 3;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <Xu_Ly_Mat_Khau.4+0x1c8>)
 80005de:	2203      	movs	r2, #3
 80005e0:	601a      	str	r2, [r3, #0]
	  		Reset_LCD();
 80005e2:	46a4      	mov	ip, r4
 80005e4:	f7ff fdb2 	bl	800014c <Reset_LCD.0>
	  }
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd90      	pop	{r4, r7, pc}
 80005f0:	2000006c 	.word	0x2000006c
 80005f4:	20000000 	.word	0x20000000
 80005f8:	2000004c 	.word	0x2000004c
 80005fc:	20000064 	.word	0x20000064
 8000600:	40010c00 	.word	0x40010c00
 8000604:	40010800 	.word	0x40010800
 8000608:	080026c8 	.word	0x080026c8
 800060c:	080026d0 	.word	0x080026d0
 8000610:	20000020 	.word	0x20000020
 8000614:	080026e0 	.word	0x080026e0
 8000618:	080026f0 	.word	0x080026f0
 800061c:	08002700 	.word	0x08002700

08000620 <KeyPad.1>:
	  int KeyPad(){
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4664      	mov	r4, ip
 8000628:	f8c7 c004 	str.w	ip, [r7, #4]
		  GPIOB -> BSRR = (1 << 0)|(1 << 1)|(1 << 8)|(1 << 3);
 800062c:	4bae      	ldr	r3, [pc, #696]	@ (80008e8 <KeyPad.1+0x2c8>)
 800062e:	f240 120b 	movw	r2, #267	@ 0x10b
 8000632:	611a      	str	r2, [r3, #16]
		  	  GPIOB -> BSRR = (1 << 16);
 8000634:	4bac      	ldr	r3, [pc, #688]	@ (80008e8 <KeyPad.1+0x2c8>)
 8000636:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800063a:	611a      	str	r2, [r3, #16]
		  	  GPIOB -> BSRR = (1 << 1)|(1 << 2)|(1 << 3);
 800063c:	4baa      	ldr	r3, [pc, #680]	@ (80008e8 <KeyPad.1+0x2c8>)
 800063e:	220e      	movs	r2, #14
 8000640:	611a      	str	r2, [r3, #16]
		        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0){
 8000642:	2110      	movs	r1, #16
 8000644:	48a8      	ldr	r0, [pc, #672]	@ (80008e8 <KeyPad.1+0x2c8>)
 8000646:	f001 f87d 	bl	8001744 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d126      	bne.n	800069e <KeyPad.1+0x7e>
		      	  HAL_Delay(50);
 8000650:	2032      	movs	r0, #50	@ 0x32
 8000652:	f000 fdeb 	bl	800122c <HAL_Delay>
		      	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0){
 8000656:	2110      	movs	r1, #16
 8000658:	48a3      	ldr	r0, [pc, #652]	@ (80008e8 <KeyPad.1+0x2c8>)
 800065a:	f001 f873 	bl	8001744 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d11c      	bne.n	800069e <KeyPad.1+0x7e>
		      	     LCD_SetCursor(x, y);
 8000664:	4ba1      	ldr	r3, [pc, #644]	@ (80008ec <KeyPad.1+0x2cc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	4aa1      	ldr	r2, [pc, #644]	@ (80008f0 <KeyPad.1+0x2d0>)
 800066c:	6812      	ldr	r2, [r2, #0]
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fca8 	bl	8000fc8 <LCD_SetCursor>
		      	     LCD_CursorBlink();
 8000678:	f000 fcc2 	bl	8001000 <LCD_CursorBlink>
		      	     LCD_Print("7");
 800067c:	489d      	ldr	r0, [pc, #628]	@ (80008f4 <KeyPad.1+0x2d4>)
 800067e:	f000 fc84 	bl	8000f8a <LCD_Print>
		      	      key = 7;
 8000682:	4b9d      	ldr	r3, [pc, #628]	@ (80008f8 <KeyPad.1+0x2d8>)
 8000684:	2207      	movs	r2, #7
 8000686:	601a      	str	r2, [r3, #0]
		      	      Read_Keypad(key);
 8000688:	4b9b      	ldr	r3, [pc, #620]	@ (80008f8 <KeyPad.1+0x2d8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	46a4      	mov	ip, r4
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fdb4 	bl	80001fc <Read_Keypad.2>
		      	     y = y + 1;
 8000694:	4b96      	ldr	r3, [pc, #600]	@ (80008f0 <KeyPad.1+0x2d0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	4a95      	ldr	r2, [pc, #596]	@ (80008f0 <KeyPad.1+0x2d0>)
 800069c:	6013      	str	r3, [r2, #0]
		        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 800069e:	2120      	movs	r1, #32
 80006a0:	4891      	ldr	r0, [pc, #580]	@ (80008e8 <KeyPad.1+0x2c8>)
 80006a2:	f001 f84f 	bl	8001744 <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d126      	bne.n	80006fa <KeyPad.1+0xda>
		      	  HAL_Delay(50);
 80006ac:	2032      	movs	r0, #50	@ 0x32
 80006ae:	f000 fdbd 	bl	800122c <HAL_Delay>
		      	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 80006b2:	2120      	movs	r1, #32
 80006b4:	488c      	ldr	r0, [pc, #560]	@ (80008e8 <KeyPad.1+0x2c8>)
 80006b6:	f001 f845 	bl	8001744 <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d11c      	bne.n	80006fa <KeyPad.1+0xda>
		      	     LCD_SetCursor(x, y);
 80006c0:	4b8a      	ldr	r3, [pc, #552]	@ (80008ec <KeyPad.1+0x2cc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4a8a      	ldr	r2, [pc, #552]	@ (80008f0 <KeyPad.1+0x2d0>)
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fc7a 	bl	8000fc8 <LCD_SetCursor>
		      	     LCD_CursorBlink();
 80006d4:	f000 fc94 	bl	8001000 <LCD_CursorBlink>
		      	     LCD_Print("4");
 80006d8:	4888      	ldr	r0, [pc, #544]	@ (80008fc <KeyPad.1+0x2dc>)
 80006da:	f000 fc56 	bl	8000f8a <LCD_Print>
		      	     key = 4;
 80006de:	4b86      	ldr	r3, [pc, #536]	@ (80008f8 <KeyPad.1+0x2d8>)
 80006e0:	2204      	movs	r2, #4
 80006e2:	601a      	str	r2, [r3, #0]
		      	     Read_Keypad(key);
 80006e4:	4b84      	ldr	r3, [pc, #528]	@ (80008f8 <KeyPad.1+0x2d8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	46a4      	mov	ip, r4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fd86 	bl	80001fc <Read_Keypad.2>
		      	     y = y + 1;
 80006f0:	4b7f      	ldr	r3, [pc, #508]	@ (80008f0 <KeyPad.1+0x2d0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	4a7e      	ldr	r2, [pc, #504]	@ (80008f0 <KeyPad.1+0x2d0>)
 80006f8:	6013      	str	r3, [r2, #0]
		        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0){
 80006fa:	2140      	movs	r1, #64	@ 0x40
 80006fc:	487a      	ldr	r0, [pc, #488]	@ (80008e8 <KeyPad.1+0x2c8>)
 80006fe:	f001 f821 	bl	8001744 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d126      	bne.n	8000756 <KeyPad.1+0x136>
		      	  HAL_Delay(50);
 8000708:	2032      	movs	r0, #50	@ 0x32
 800070a:	f000 fd8f 	bl	800122c <HAL_Delay>
		      	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0){
 800070e:	2140      	movs	r1, #64	@ 0x40
 8000710:	4875      	ldr	r0, [pc, #468]	@ (80008e8 <KeyPad.1+0x2c8>)
 8000712:	f001 f817 	bl	8001744 <HAL_GPIO_ReadPin>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d11c      	bne.n	8000756 <KeyPad.1+0x136>
		      		 LCD_SetCursor(x, y);
 800071c:	4b73      	ldr	r3, [pc, #460]	@ (80008ec <KeyPad.1+0x2cc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4a73      	ldr	r2, [pc, #460]	@ (80008f0 <KeyPad.1+0x2d0>)
 8000724:	6812      	ldr	r2, [r2, #0]
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	4611      	mov	r1, r2
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fc4c 	bl	8000fc8 <LCD_SetCursor>
		      		 LCD_CursorBlink();
 8000730:	f000 fc66 	bl	8001000 <LCD_CursorBlink>
		      		 LCD_Print("1");
 8000734:	4872      	ldr	r0, [pc, #456]	@ (8000900 <KeyPad.1+0x2e0>)
 8000736:	f000 fc28 	bl	8000f8a <LCD_Print>
		      		  key = 1;
 800073a:	4b6f      	ldr	r3, [pc, #444]	@ (80008f8 <KeyPad.1+0x2d8>)
 800073c:	2201      	movs	r2, #1
 800073e:	601a      	str	r2, [r3, #0]
		      		  Read_Keypad(key);
 8000740:	4b6d      	ldr	r3, [pc, #436]	@ (80008f8 <KeyPad.1+0x2d8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	46a4      	mov	ip, r4
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd58 	bl	80001fc <Read_Keypad.2>
		      		 y = y + 1;
 800074c:	4b68      	ldr	r3, [pc, #416]	@ (80008f0 <KeyPad.1+0x2d0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	4a67      	ldr	r2, [pc, #412]	@ (80008f0 <KeyPad.1+0x2d0>)
 8000754:	6013      	str	r3, [r2, #0]
		        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0){
 8000756:	2180      	movs	r1, #128	@ 0x80
 8000758:	4863      	ldr	r0, [pc, #396]	@ (80008e8 <KeyPad.1+0x2c8>)
 800075a:	f000 fff3 	bl	8001744 <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d11d      	bne.n	80007a0 <KeyPad.1+0x180>
		      	   HAL_Delay(50);
 8000764:	2032      	movs	r0, #50	@ 0x32
 8000766:	f000 fd61 	bl	800122c <HAL_Delay>
		      	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0){
 800076a:	2180      	movs	r1, #128	@ 0x80
 800076c:	485e      	ldr	r0, [pc, #376]	@ (80008e8 <KeyPad.1+0x2c8>)
 800076e:	f000 ffe9 	bl	8001744 <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d113      	bne.n	80007a0 <KeyPad.1+0x180>
		      	      LCD_SetCursor(x, y);
 8000778:	4b5c      	ldr	r3, [pc, #368]	@ (80008ec <KeyPad.1+0x2cc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4a5c      	ldr	r2, [pc, #368]	@ (80008f0 <KeyPad.1+0x2d0>)
 8000780:	6812      	ldr	r2, [r2, #0]
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fc1e 	bl	8000fc8 <LCD_SetCursor>
		      	      LCD_CursorBlink();
 800078c:	f000 fc38 	bl	8001000 <LCD_CursorBlink>
		      	      LCD_Print("*");
 8000790:	485c      	ldr	r0, [pc, #368]	@ (8000904 <KeyPad.1+0x2e4>)
 8000792:	f000 fbfa 	bl	8000f8a <LCD_Print>
		      	      y = y + 1;
 8000796:	4b56      	ldr	r3, [pc, #344]	@ (80008f0 <KeyPad.1+0x2d0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	4a54      	ldr	r2, [pc, #336]	@ (80008f0 <KeyPad.1+0x2d0>)
 800079e:	6013      	str	r3, [r2, #0]
		        GPIOB -> BSRR = (1 << 17);
 80007a0:	4b51      	ldr	r3, [pc, #324]	@ (80008e8 <KeyPad.1+0x2c8>)
 80007a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80007a6:	611a      	str	r2, [r3, #16]
		        GPIOB -> BSRR = (1 << 0)|(1 << 2)|(1 << 3);
 80007a8:	4b4f      	ldr	r3, [pc, #316]	@ (80008e8 <KeyPad.1+0x2c8>)
 80007aa:	220d      	movs	r2, #13
 80007ac:	611a      	str	r2, [r3, #16]
		        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0){
 80007ae:	2110      	movs	r1, #16
 80007b0:	484d      	ldr	r0, [pc, #308]	@ (80008e8 <KeyPad.1+0x2c8>)
 80007b2:	f000 ffc7 	bl	8001744 <HAL_GPIO_ReadPin>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d126      	bne.n	800080a <KeyPad.1+0x1ea>
		           HAL_Delay(50);
 80007bc:	2032      	movs	r0, #50	@ 0x32
 80007be:	f000 fd35 	bl	800122c <HAL_Delay>
		           if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0){
 80007c2:	2110      	movs	r1, #16
 80007c4:	4848      	ldr	r0, [pc, #288]	@ (80008e8 <KeyPad.1+0x2c8>)
 80007c6:	f000 ffbd 	bl	8001744 <HAL_GPIO_ReadPin>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d11c      	bne.n	800080a <KeyPad.1+0x1ea>
		            	LCD_SetCursor(x, y);
 80007d0:	4b46      	ldr	r3, [pc, #280]	@ (80008ec <KeyPad.1+0x2cc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	4a46      	ldr	r2, [pc, #280]	@ (80008f0 <KeyPad.1+0x2d0>)
 80007d8:	6812      	ldr	r2, [r2, #0]
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	4611      	mov	r1, r2
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 fbf2 	bl	8000fc8 <LCD_SetCursor>
		            	LCD_CursorBlink();
 80007e4:	f000 fc0c 	bl	8001000 <LCD_CursorBlink>
		              LCD_Print("8");
 80007e8:	4847      	ldr	r0, [pc, #284]	@ (8000908 <KeyPad.1+0x2e8>)
 80007ea:	f000 fbce 	bl	8000f8a <LCD_Print>
		              key = 8;
 80007ee:	4b42      	ldr	r3, [pc, #264]	@ (80008f8 <KeyPad.1+0x2d8>)
 80007f0:	2208      	movs	r2, #8
 80007f2:	601a      	str	r2, [r3, #0]
		              Read_Keypad(key);
 80007f4:	4b40      	ldr	r3, [pc, #256]	@ (80008f8 <KeyPad.1+0x2d8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	46a4      	mov	ip, r4
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fcfe 	bl	80001fc <Read_Keypad.2>
		            	y = y + 1;
 8000800:	4b3b      	ldr	r3, [pc, #236]	@ (80008f0 <KeyPad.1+0x2d0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	4a3a      	ldr	r2, [pc, #232]	@ (80008f0 <KeyPad.1+0x2d0>)
 8000808:	6013      	str	r3, [r2, #0]
		        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 800080a:	2120      	movs	r1, #32
 800080c:	4836      	ldr	r0, [pc, #216]	@ (80008e8 <KeyPad.1+0x2c8>)
 800080e:	f000 ff99 	bl	8001744 <HAL_GPIO_ReadPin>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d126      	bne.n	8000866 <KeyPad.1+0x246>
		            	 HAL_Delay(50);
 8000818:	2032      	movs	r0, #50	@ 0x32
 800081a:	f000 fd07 	bl	800122c <HAL_Delay>
		            	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 800081e:	2120      	movs	r1, #32
 8000820:	4831      	ldr	r0, [pc, #196]	@ (80008e8 <KeyPad.1+0x2c8>)
 8000822:	f000 ff8f 	bl	8001744 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d11c      	bne.n	8000866 <KeyPad.1+0x246>
		            	    LCD_SetCursor(x, y);
 800082c:	4b2f      	ldr	r3, [pc, #188]	@ (80008ec <KeyPad.1+0x2cc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	4a2f      	ldr	r2, [pc, #188]	@ (80008f0 <KeyPad.1+0x2d0>)
 8000834:	6812      	ldr	r2, [r2, #0]
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fbc4 	bl	8000fc8 <LCD_SetCursor>
		            	    LCD_CursorBlink();
 8000840:	f000 fbde 	bl	8001000 <LCD_CursorBlink>
		            	    LCD_Print("5");
 8000844:	4831      	ldr	r0, [pc, #196]	@ (800090c <KeyPad.1+0x2ec>)
 8000846:	f000 fba0 	bl	8000f8a <LCD_Print>
		            	    key = 5;
 800084a:	4b2b      	ldr	r3, [pc, #172]	@ (80008f8 <KeyPad.1+0x2d8>)
 800084c:	2205      	movs	r2, #5
 800084e:	601a      	str	r2, [r3, #0]
		            	    Read_Keypad(key);
 8000850:	4b29      	ldr	r3, [pc, #164]	@ (80008f8 <KeyPad.1+0x2d8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	46a4      	mov	ip, r4
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fcd0 	bl	80001fc <Read_Keypad.2>
		            	    y = y + 1;
 800085c:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <KeyPad.1+0x2d0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	4a23      	ldr	r2, [pc, #140]	@ (80008f0 <KeyPad.1+0x2d0>)
 8000864:	6013      	str	r3, [r2, #0]
		        if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0){
 8000866:	2140      	movs	r1, #64	@ 0x40
 8000868:	481f      	ldr	r0, [pc, #124]	@ (80008e8 <KeyPad.1+0x2c8>)
 800086a:	f000 ff6b 	bl	8001744 <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d126      	bne.n	80008c2 <KeyPad.1+0x2a2>
		               HAL_Delay(50);
 8000874:	2032      	movs	r0, #50	@ 0x32
 8000876:	f000 fcd9 	bl	800122c <HAL_Delay>
		               if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0){
 800087a:	2140      	movs	r1, #64	@ 0x40
 800087c:	481a      	ldr	r0, [pc, #104]	@ (80008e8 <KeyPad.1+0x2c8>)
 800087e:	f000 ff61 	bl	8001744 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d11c      	bne.n	80008c2 <KeyPad.1+0x2a2>
		                  LCD_SetCursor(x, y);
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <KeyPad.1+0x2cc>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4a18      	ldr	r2, [pc, #96]	@ (80008f0 <KeyPad.1+0x2d0>)
 8000890:	6812      	ldr	r2, [r2, #0]
 8000892:	b2d2      	uxtb	r2, r2
 8000894:	4611      	mov	r1, r2
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fb96 	bl	8000fc8 <LCD_SetCursor>
		                  LCD_CursorBlink();
 800089c:	f000 fbb0 	bl	8001000 <LCD_CursorBlink>
		                  LCD_Print("2");
 80008a0:	481b      	ldr	r0, [pc, #108]	@ (8000910 <KeyPad.1+0x2f0>)
 80008a2:	f000 fb72 	bl	8000f8a <LCD_Print>
		                   key = 2;
 80008a6:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <KeyPad.1+0x2d8>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	601a      	str	r2, [r3, #0]
		                   Read_Keypad(key);
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <KeyPad.1+0x2d8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	46a4      	mov	ip, r4
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fca2 	bl	80001fc <Read_Keypad.2>
		                  y = y + 1;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <KeyPad.1+0x2d0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	4a0c      	ldr	r2, [pc, #48]	@ (80008f0 <KeyPad.1+0x2d0>)
 80008c0:	6013      	str	r3, [r2, #0]
		        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0){
 80008c2:	2180      	movs	r1, #128	@ 0x80
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <KeyPad.1+0x2c8>)
 80008c6:	f000 ff3d 	bl	8001744 <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d13e      	bne.n	800094e <KeyPad.1+0x32e>
		            	  HAL_Delay(50);
 80008d0:	2032      	movs	r0, #50	@ 0x32
 80008d2:	f000 fcab 	bl	800122c <HAL_Delay>
		            	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0){
 80008d6:	2180      	movs	r1, #128	@ 0x80
 80008d8:	4803      	ldr	r0, [pc, #12]	@ (80008e8 <KeyPad.1+0x2c8>)
 80008da:	f000 ff33 	bl	8001744 <HAL_GPIO_ReadPin>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d134      	bne.n	800094e <KeyPad.1+0x32e>
 80008e4:	e016      	b.n	8000914 <KeyPad.1+0x2f4>
 80008e6:	bf00      	nop
 80008e8:	40010c00 	.word	0x40010c00
 80008ec:	20000018 	.word	0x20000018
 80008f0:	2000001c 	.word	0x2000001c
 80008f4:	0800270c 	.word	0x0800270c
 80008f8:	20000068 	.word	0x20000068
 80008fc:	08002710 	.word	0x08002710
 8000900:	08002714 	.word	0x08002714
 8000904:	08002718 	.word	0x08002718
 8000908:	0800271c 	.word	0x0800271c
 800090c:	08002720 	.word	0x08002720
 8000910:	08002724 	.word	0x08002724
		            	     LCD_SetCursor(x, y);
 8000914:	4bad      	ldr	r3, [pc, #692]	@ (8000bcc <KeyPad.1+0x5ac>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4aad      	ldr	r2, [pc, #692]	@ (8000bd0 <KeyPad.1+0x5b0>)
 800091c:	6812      	ldr	r2, [r2, #0]
 800091e:	b2d2      	uxtb	r2, r2
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fb50 	bl	8000fc8 <LCD_SetCursor>
		            	     LCD_CursorBlink();
 8000928:	f000 fb6a 	bl	8001000 <LCD_CursorBlink>
		            	     LCD_Print("0");
 800092c:	48a9      	ldr	r0, [pc, #676]	@ (8000bd4 <KeyPad.1+0x5b4>)
 800092e:	f000 fb2c 	bl	8000f8a <LCD_Print>
		            	      key = 0;
 8000932:	4ba9      	ldr	r3, [pc, #676]	@ (8000bd8 <KeyPad.1+0x5b8>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
		            	    Read_Keypad(key);
 8000938:	4ba7      	ldr	r3, [pc, #668]	@ (8000bd8 <KeyPad.1+0x5b8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	46a4      	mov	ip, r4
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fc5c 	bl	80001fc <Read_Keypad.2>
		            	     y = y + 1;
 8000944:	4ba2      	ldr	r3, [pc, #648]	@ (8000bd0 <KeyPad.1+0x5b0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	4aa1      	ldr	r2, [pc, #644]	@ (8000bd0 <KeyPad.1+0x5b0>)
 800094c:	6013      	str	r3, [r2, #0]
		         GPIOB -> BSRR = (1 << 24);
 800094e:	4ba3      	ldr	r3, [pc, #652]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000950:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000954:	611a      	str	r2, [r3, #16]
		         GPIOB -> BSRR = (1 << 0)|(1 << 1)|(1 << 3);
 8000956:	4ba1      	ldr	r3, [pc, #644]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000958:	220b      	movs	r2, #11
 800095a:	611a      	str	r2, [r3, #16]
		         if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0){
 800095c:	2110      	movs	r1, #16
 800095e:	489f      	ldr	r0, [pc, #636]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000960:	f000 fef0 	bl	8001744 <HAL_GPIO_ReadPin>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d126      	bne.n	80009b8 <KeyPad.1+0x398>
		            HAL_Delay(50);
 800096a:	2032      	movs	r0, #50	@ 0x32
 800096c:	f000 fc5e 	bl	800122c <HAL_Delay>
		            if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0){
 8000970:	2110      	movs	r1, #16
 8000972:	489a      	ldr	r0, [pc, #616]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000974:	f000 fee6 	bl	8001744 <HAL_GPIO_ReadPin>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d11c      	bne.n	80009b8 <KeyPad.1+0x398>
		            	 LCD_SetCursor(x, y);
 800097e:	4b93      	ldr	r3, [pc, #588]	@ (8000bcc <KeyPad.1+0x5ac>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	4a92      	ldr	r2, [pc, #584]	@ (8000bd0 <KeyPad.1+0x5b0>)
 8000986:	6812      	ldr	r2, [r2, #0]
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fb1b 	bl	8000fc8 <LCD_SetCursor>
		            	 LCD_CursorBlink();
 8000992:	f000 fb35 	bl	8001000 <LCD_CursorBlink>
		            	 LCD_Print("9");
 8000996:	4892      	ldr	r0, [pc, #584]	@ (8000be0 <KeyPad.1+0x5c0>)
 8000998:	f000 faf7 	bl	8000f8a <LCD_Print>
		            	  key = 9;
 800099c:	4b8e      	ldr	r3, [pc, #568]	@ (8000bd8 <KeyPad.1+0x5b8>)
 800099e:	2209      	movs	r2, #9
 80009a0:	601a      	str	r2, [r3, #0]
		            	Read_Keypad(key);
 80009a2:	4b8d      	ldr	r3, [pc, #564]	@ (8000bd8 <KeyPad.1+0x5b8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	46a4      	mov	ip, r4
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fc27 	bl	80001fc <Read_Keypad.2>
		            	 y = y + 1;
 80009ae:	4b88      	ldr	r3, [pc, #544]	@ (8000bd0 <KeyPad.1+0x5b0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	4a86      	ldr	r2, [pc, #536]	@ (8000bd0 <KeyPad.1+0x5b0>)
 80009b6:	6013      	str	r3, [r2, #0]
		         if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 80009b8:	2120      	movs	r1, #32
 80009ba:	4888      	ldr	r0, [pc, #544]	@ (8000bdc <KeyPad.1+0x5bc>)
 80009bc:	f000 fec2 	bl	8001744 <HAL_GPIO_ReadPin>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d126      	bne.n	8000a14 <KeyPad.1+0x3f4>
		             HAL_Delay(50);
 80009c6:	2032      	movs	r0, #50	@ 0x32
 80009c8:	f000 fc30 	bl	800122c <HAL_Delay>
		             if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 80009cc:	2120      	movs	r1, #32
 80009ce:	4883      	ldr	r0, [pc, #524]	@ (8000bdc <KeyPad.1+0x5bc>)
 80009d0:	f000 feb8 	bl	8001744 <HAL_GPIO_ReadPin>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d11c      	bne.n	8000a14 <KeyPad.1+0x3f4>
		                LCD_SetCursor(x, y);
 80009da:	4b7c      	ldr	r3, [pc, #496]	@ (8000bcc <KeyPad.1+0x5ac>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4a7b      	ldr	r2, [pc, #492]	@ (8000bd0 <KeyPad.1+0x5b0>)
 80009e2:	6812      	ldr	r2, [r2, #0]
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 faed 	bl	8000fc8 <LCD_SetCursor>
		                LCD_CursorBlink();
 80009ee:	f000 fb07 	bl	8001000 <LCD_CursorBlink>
		                LCD_Print("6");
 80009f2:	487c      	ldr	r0, [pc, #496]	@ (8000be4 <KeyPad.1+0x5c4>)
 80009f4:	f000 fac9 	bl	8000f8a <LCD_Print>
		                key = 6;
 80009f8:	4b77      	ldr	r3, [pc, #476]	@ (8000bd8 <KeyPad.1+0x5b8>)
 80009fa:	2206      	movs	r2, #6
 80009fc:	601a      	str	r2, [r3, #0]
		                Read_Keypad(key);
 80009fe:	4b76      	ldr	r3, [pc, #472]	@ (8000bd8 <KeyPad.1+0x5b8>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	46a4      	mov	ip, r4
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fbf9 	bl	80001fc <Read_Keypad.2>
		                y = y + 1;
 8000a0a:	4b71      	ldr	r3, [pc, #452]	@ (8000bd0 <KeyPad.1+0x5b0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	4a6f      	ldr	r2, [pc, #444]	@ (8000bd0 <KeyPad.1+0x5b0>)
 8000a12:	6013      	str	r3, [r2, #0]
		         if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0){
 8000a14:	2140      	movs	r1, #64	@ 0x40
 8000a16:	4871      	ldr	r0, [pc, #452]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000a18:	f000 fe94 	bl	8001744 <HAL_GPIO_ReadPin>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d126      	bne.n	8000a70 <KeyPad.1+0x450>
		             HAL_Delay(50);
 8000a22:	2032      	movs	r0, #50	@ 0x32
 8000a24:	f000 fc02 	bl	800122c <HAL_Delay>
		             if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0){
 8000a28:	2140      	movs	r1, #64	@ 0x40
 8000a2a:	486c      	ldr	r0, [pc, #432]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000a2c:	f000 fe8a 	bl	8001744 <HAL_GPIO_ReadPin>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d11c      	bne.n	8000a70 <KeyPad.1+0x450>
		                LCD_SetCursor(x, y);
 8000a36:	4b65      	ldr	r3, [pc, #404]	@ (8000bcc <KeyPad.1+0x5ac>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4a64      	ldr	r2, [pc, #400]	@ (8000bd0 <KeyPad.1+0x5b0>)
 8000a3e:	6812      	ldr	r2, [r2, #0]
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fabf 	bl	8000fc8 <LCD_SetCursor>
		                LCD_CursorBlink();
 8000a4a:	f000 fad9 	bl	8001000 <LCD_CursorBlink>
		                LCD_Print("3");
 8000a4e:	4866      	ldr	r0, [pc, #408]	@ (8000be8 <KeyPad.1+0x5c8>)
 8000a50:	f000 fa9b 	bl	8000f8a <LCD_Print>
		                key = 3;
 8000a54:	4b60      	ldr	r3, [pc, #384]	@ (8000bd8 <KeyPad.1+0x5b8>)
 8000a56:	2203      	movs	r2, #3
 8000a58:	601a      	str	r2, [r3, #0]
		                Read_Keypad(key);
 8000a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8000bd8 <KeyPad.1+0x5b8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	46a4      	mov	ip, r4
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fbcb 	bl	80001fc <Read_Keypad.2>
		                y = y + 1;
 8000a66:	4b5a      	ldr	r3, [pc, #360]	@ (8000bd0 <KeyPad.1+0x5b0>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a58      	ldr	r2, [pc, #352]	@ (8000bd0 <KeyPad.1+0x5b0>)
 8000a6e:	6013      	str	r3, [r2, #0]
		          if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0){
 8000a70:	2180      	movs	r1, #128	@ 0x80
 8000a72:	485a      	ldr	r0, [pc, #360]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000a74:	f000 fe66 	bl	8001744 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d11d      	bne.n	8000aba <KeyPad.1+0x49a>
		            	HAL_Delay(50);
 8000a7e:	2032      	movs	r0, #50	@ 0x32
 8000a80:	f000 fbd4 	bl	800122c <HAL_Delay>
		              if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0){
 8000a84:	2180      	movs	r1, #128	@ 0x80
 8000a86:	4855      	ldr	r0, [pc, #340]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000a88:	f000 fe5c 	bl	8001744 <HAL_GPIO_ReadPin>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d113      	bne.n	8000aba <KeyPad.1+0x49a>
		            	   LCD_SetCursor(x, y);
 8000a92:	4b4e      	ldr	r3, [pc, #312]	@ (8000bcc <KeyPad.1+0x5ac>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4a4d      	ldr	r2, [pc, #308]	@ (8000bd0 <KeyPad.1+0x5b0>)
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fa91 	bl	8000fc8 <LCD_SetCursor>
		            	   LCD_CursorBlink();
 8000aa6:	f000 faab 	bl	8001000 <LCD_CursorBlink>
		            	   LCD_Print("#");
 8000aaa:	4850      	ldr	r0, [pc, #320]	@ (8000bec <KeyPad.1+0x5cc>)
 8000aac:	f000 fa6d 	bl	8000f8a <LCD_Print>
		            	   y = y + 1;
 8000ab0:	4b47      	ldr	r3, [pc, #284]	@ (8000bd0 <KeyPad.1+0x5b0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a46      	ldr	r2, [pc, #280]	@ (8000bd0 <KeyPad.1+0x5b0>)
 8000ab8:	6013      	str	r3, [r2, #0]
		          GPIOB -> BSRR = (1 << 19);
 8000aba:	4b48      	ldr	r3, [pc, #288]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000abc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ac0:	611a      	str	r2, [r3, #16]
		          GPIOB -> BSRR = (1 << 0)|(1 << 1)|(1 << 2);
 8000ac2:	4b46      	ldr	r3, [pc, #280]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	611a      	str	r2, [r3, #16]
		          if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0){
 8000ac8:	2110      	movs	r1, #16
 8000aca:	4844      	ldr	r0, [pc, #272]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000acc:	f000 fe3a 	bl	8001744 <HAL_GPIO_ReadPin>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d117      	bne.n	8000b06 <KeyPad.1+0x4e6>
		             HAL_Delay(50);
 8000ad6:	2032      	movs	r0, #50	@ 0x32
 8000ad8:	f000 fba8 	bl	800122c <HAL_Delay>
		             if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0){
 8000adc:	2110      	movs	r1, #16
 8000ade:	483f      	ldr	r0, [pc, #252]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000ae0:	f000 fe30 	bl	8001744 <HAL_GPIO_ReadPin>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10d      	bne.n	8000b06 <KeyPad.1+0x4e6>
		          	   if(Check_Mode == 1){
 8000aea:	4b41      	ldr	r3, [pc, #260]	@ (8000bf0 <KeyPad.1+0x5d0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d102      	bne.n	8000af8 <KeyPad.1+0x4d8>
		          		   Check_Old_Passcode();
 8000af2:	46a4      	mov	ip, r4
 8000af4:	f7ff fc38 	bl	8000368 <Check_Old_Passcode.3>
		          	   }if(Check_Mode == 0){
 8000af8:	4b3d      	ldr	r3, [pc, #244]	@ (8000bf0 <KeyPad.1+0x5d0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <KeyPad.1+0x4e6>
		          		   Xu_Ly_Mat_Khau();
 8000b00:	46a4      	mov	ip, r4
 8000b02:	f7ff fca1 	bl	8000448 <Xu_Ly_Mat_Khau.4>
		          if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 8000b06:	2120      	movs	r1, #32
 8000b08:	4834      	ldr	r0, [pc, #208]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000b0a:	f000 fe1b 	bl	8001744 <HAL_GPIO_ReadPin>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d12c      	bne.n	8000b6e <KeyPad.1+0x54e>
		             HAL_Delay(50);
 8000b14:	2032      	movs	r0, #50	@ 0x32
 8000b16:	f000 fb89 	bl	800122c <HAL_Delay>
		             if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0){
 8000b1a:	2120      	movs	r1, #32
 8000b1c:	482f      	ldr	r0, [pc, #188]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000b1e:	f000 fe11 	bl	8001744 <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d122      	bne.n	8000b6e <KeyPad.1+0x54e>
		                y = y - 1;
 8000b28:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <KeyPad.1+0x5b0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	4a28      	ldr	r2, [pc, #160]	@ (8000bd0 <KeyPad.1+0x5b0>)
 8000b30:	6013      	str	r3, [r2, #0]
		                LCD_SetCursor(x, y);
 8000b32:	4b26      	ldr	r3, [pc, #152]	@ (8000bcc <KeyPad.1+0x5ac>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	4a25      	ldr	r2, [pc, #148]	@ (8000bd0 <KeyPad.1+0x5b0>)
 8000b3a:	6812      	ldr	r2, [r2, #0]
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fa41 	bl	8000fc8 <LCD_SetCursor>
		                LCD_CursorBlink();
 8000b46:	f000 fa5b 	bl	8001000 <LCD_CursorBlink>
		                LCD_Print(" ");
 8000b4a:	482a      	ldr	r0, [pc, #168]	@ (8000bf4 <KeyPad.1+0x5d4>)
 8000b4c:	f000 fa1d 	bl	8000f8a <LCD_Print>
		                LCD_SetCursor(x, y);
 8000b50:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <KeyPad.1+0x5ac>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	4a1e      	ldr	r2, [pc, #120]	@ (8000bd0 <KeyPad.1+0x5b0>)
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fa32 	bl	8000fc8 <LCD_SetCursor>
		                count--;
 8000b64:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <KeyPad.1+0x5d8>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	4a23      	ldr	r2, [pc, #140]	@ (8000bf8 <KeyPad.1+0x5d8>)
 8000b6c:	6013      	str	r3, [r2, #0]
		             if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0){
 8000b6e:	2140      	movs	r1, #64	@ 0x40
 8000b70:	481a      	ldr	r0, [pc, #104]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000b72:	f000 fde7 	bl	8001744 <HAL_GPIO_ReadPin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d10c      	bne.n	8000b96 <KeyPad.1+0x576>
		                HAL_Delay(50);
 8000b7c:	2032      	movs	r0, #50	@ 0x32
 8000b7e:	f000 fb55 	bl	800122c <HAL_Delay>
		                if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0){
 8000b82:	2140      	movs	r1, #64	@ 0x40
 8000b84:	4815      	ldr	r0, [pc, #84]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000b86:	f000 fddd 	bl	8001744 <HAL_GPIO_ReadPin>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <KeyPad.1+0x576>
		                  Change_Passcode();
 8000b90:	46a4      	mov	ip, r4
 8000b92:	f7ff fbd9 	bl	8000348 <Change_Passcode.5>
		             if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0){
 8000b96:	2180      	movs	r1, #128	@ 0x80
 8000b98:	4810      	ldr	r0, [pc, #64]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000b9a:	f000 fdd3 	bl	8001744 <HAL_GPIO_ReadPin>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10c      	bne.n	8000bbe <KeyPad.1+0x59e>
		                 HAL_Delay(50);
 8000ba4:	2032      	movs	r0, #50	@ 0x32
 8000ba6:	f000 fb41 	bl	800122c <HAL_Delay>
		                 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0){
 8000baa:	2180      	movs	r1, #128	@ 0x80
 8000bac:	480b      	ldr	r0, [pc, #44]	@ (8000bdc <KeyPad.1+0x5bc>)
 8000bae:	f000 fdc9 	bl	8001744 <HAL_GPIO_ReadPin>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <KeyPad.1+0x59e>
		              	  Reset_LCD();
 8000bb8:	46a4      	mov	ip, r4
 8000bba:	f7ff fac7 	bl	800014c <Reset_LCD.0>
                   return key;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <KeyPad.1+0x5b8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
	  }
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd90      	pop	{r4, r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000018 	.word	0x20000018
 8000bd0:	2000001c 	.word	0x2000001c
 8000bd4:	08002728 	.word	0x08002728
 8000bd8:	20000068 	.word	0x20000068
 8000bdc:	40010c00 	.word	0x40010c00
 8000be0:	0800272c 	.word	0x0800272c
 8000be4:	08002730 	.word	0x08002730
 8000be8:	08002734 	.word	0x08002734
 8000bec:	08002738 	.word	0x08002738
 8000bf0:	20000074 	.word	0x20000074
 8000bf4:	0800273c 	.word	0x0800273c
 8000bf8:	20000064 	.word	0x20000064

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b090      	sub	sp, #64	@ 0x40
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0318 	add.w	r3, r7, #24
 8000c06:	2228      	movs	r2, #40	@ 0x28
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 fcf4 	bl	80025f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c30:	2302      	movs	r3, #2
 8000c32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c3a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 fdad 	bl	80017a4 <HAL_RCC_OscConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c50:	f000 f8ec 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c54:	230f      	movs	r3, #15
 8000c56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 f81a 	bl	8001ca8 <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c7a:	f000 f8d7 	bl	8000e2c <Error_Handler>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3740      	adds	r7, #64	@ 0x40
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	@ 0x30
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8e:	f107 0320 	add.w	r3, r7, #32
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cb4:	4b25      	ldr	r3, [pc, #148]	@ (8000d4c <MX_TIM2_Init+0xc4>)
 8000cb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cbc:	4b23      	ldr	r3, [pc, #140]	@ (8000d4c <MX_TIM2_Init+0xc4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc2:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <MX_TIM2_Init+0xc4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000cc8:	4b20      	ldr	r3, [pc, #128]	@ (8000d4c <MX_TIM2_Init+0xc4>)
 8000cca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <MX_TIM2_Init+0xc4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <MX_TIM2_Init+0xc4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cdc:	481b      	ldr	r0, [pc, #108]	@ (8000d4c <MX_TIM2_Init+0xc4>)
 8000cde:	f001 f93f 	bl	8001f60 <HAL_TIM_Base_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000ce8:	f000 f8a0 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4814      	ldr	r0, [pc, #80]	@ (8000d4c <MX_TIM2_Init+0xc4>)
 8000cfa:	f001 f980 	bl	8001ffe <HAL_TIM_ConfigClockSource>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000d04:	f000 f892 	bl	8000e2c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8000d0c:	2320      	movs	r3, #32
 8000d0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	4619      	mov	r1, r3
 8000d16:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <MX_TIM2_Init+0xc4>)
 8000d18:	f001 fa38 	bl	800218c <HAL_TIM_SlaveConfigSynchro>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d22:	f000 f883 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	@ (8000d4c <MX_TIM2_Init+0xc4>)
 8000d34:	f001 fc02 	bl	800253c <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000d3e:	f000 f875 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3730      	adds	r7, #48	@ 0x30
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000078 	.word	0x20000078

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d64:	4b2e      	ldr	r3, [pc, #184]	@ (8000e20 <MX_GPIO_Init+0xd0>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a2d      	ldr	r2, [pc, #180]	@ (8000e20 <MX_GPIO_Init+0xd0>)
 8000d6a:	f043 0320 	orr.w	r3, r3, #32
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b2b      	ldr	r3, [pc, #172]	@ (8000e20 <MX_GPIO_Init+0xd0>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0320 	and.w	r3, r3, #32
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <MX_GPIO_Init+0xd0>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a27      	ldr	r2, [pc, #156]	@ (8000e20 <MX_GPIO_Init+0xd0>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b25      	ldr	r3, [pc, #148]	@ (8000e20 <MX_GPIO_Init+0xd0>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	4b22      	ldr	r3, [pc, #136]	@ (8000e20 <MX_GPIO_Init+0xd0>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a21      	ldr	r2, [pc, #132]	@ (8000e20 <MX_GPIO_Init+0xd0>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <MX_GPIO_Init+0xd0>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dac:	2200      	movs	r2, #0
 8000dae:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 8000db2:	481c      	ldr	r0, [pc, #112]	@ (8000e24 <MX_GPIO_Init+0xd4>)
 8000db4:	f000 fcdd 	bl	8001772 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000db8:	2200      	movs	r2, #0
 8000dba:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8000dbe:	481a      	ldr	r0, [pc, #104]	@ (8000e28 <MX_GPIO_Init+0xd8>)
 8000dc0:	f000 fcd7 	bl	8001772 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000dc4:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 8000dc8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4811      	ldr	r0, [pc, #68]	@ (8000e24 <MX_GPIO_Init+0xd4>)
 8000dde:	f000 fb2d 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB3 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000de2:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8000de6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480b      	ldr	r0, [pc, #44]	@ (8000e28 <MX_GPIO_Init+0xd8>)
 8000dfc:	f000 fb1e 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e00:	23f0      	movs	r3, #240	@ 0xf0
 8000e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4619      	mov	r1, r3
 8000e12:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <MX_GPIO_Init+0xd8>)
 8000e14:	f000 fb12 	bl	800143c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e18:	bf00      	nop
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010800 	.word	0x40010800
 8000e28:	40010c00 	.word	0x40010c00

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <Error_Handler+0x8>

08000e38 <LCD_SendHalf>:
#include "LCD.h"
#include <stdio.h>  // Để sử dụng sprintf cho việc chuyển đổi số thành chuỗi
// Gửi nửa byte (4-bit) đến LCD
void LCD_SendHalf(uint8_t data) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_PORT, D4_PIN, (data >> 0) & 0x01);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	4814      	ldr	r0, [pc, #80]	@ (8000ea0 <LCD_SendHalf+0x68>)
 8000e50:	f000 fc8f 	bl	8001772 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D5_PIN, (data >> 1) & 0x01);
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	085b      	lsrs	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	2120      	movs	r1, #32
 8000e64:	480e      	ldr	r0, [pc, #56]	@ (8000ea0 <LCD_SendHalf+0x68>)
 8000e66:	f000 fc84 	bl	8001772 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D6_PIN, (data >> 2) & 0x01);
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	461a      	mov	r2, r3
 8000e78:	2140      	movs	r1, #64	@ 0x40
 8000e7a:	4809      	ldr	r0, [pc, #36]	@ (8000ea0 <LCD_SendHalf+0x68>)
 8000e7c:	f000 fc79 	bl	8001772 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT, D7_PIN, (data >> 3) & 0x01);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	2180      	movs	r1, #128	@ 0x80
 8000e90:	4803      	ldr	r0, [pc, #12]	@ (8000ea0 <LCD_SendHalf+0x68>)
 8000e92:	f000 fc6e 	bl	8001772 <HAL_GPIO_WritePin>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40010800 	.word	0x40010800

08000ea4 <LCD_Enable>:

// Kích hoạt xung EN
void LCD_Enable(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_PORT, EN_PIN, GPIO_PIN_SET);   // Set EN
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <LCD_Enable+0x28>)
 8000eae:	f000 fc60 	bl	8001772 <HAL_GPIO_WritePin>
    HAL_Delay(5);                                        // Delay nhỏ
 8000eb2:	2005      	movs	r0, #5
 8000eb4:	f000 f9ba 	bl	800122c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_PORT, EN_PIN, GPIO_PIN_RESET); // Reset EN
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2102      	movs	r1, #2
 8000ebc:	4803      	ldr	r0, [pc, #12]	@ (8000ecc <LCD_Enable+0x28>)
 8000ebe:	f000 fc58 	bl	8001772 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000ec2:	2005      	movs	r0, #5
 8000ec4:	f000 f9b2 	bl	800122c <HAL_Delay>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40010800 	.word	0x40010800

08000ed0 <LCD_SendCmd>:

// Gửi lệnh đến LCD
void LCD_SendCmd(uint8_t cmd) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_PORT, RS_PIN, GPIO_PIN_RESET);  // Chọn chế độ lệnh
 8000eda:	2200      	movs	r2, #0
 8000edc:	2101      	movs	r1, #1
 8000ede:	480c      	ldr	r0, [pc, #48]	@ (8000f10 <LCD_SendCmd+0x40>)
 8000ee0:	f000 fc47 	bl	8001772 <HAL_GPIO_WritePin>
    LCD_SendHalf(cmd >> 4);                               // Gửi 4 bit cao
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	091b      	lsrs	r3, r3, #4
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ffa4 	bl	8000e38 <LCD_SendHalf>
    LCD_Enable();
 8000ef0:	f7ff ffd8 	bl	8000ea4 <LCD_Enable>
    LCD_SendHalf(cmd & 0x0F);                             // Gửi 4 bit thấp
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff9b 	bl	8000e38 <LCD_SendHalf>
    LCD_Enable();
 8000f02:	f7ff ffcf 	bl	8000ea4 <LCD_Enable>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40010800 	.word	0x40010800

08000f14 <LCD_SendData>:

// Gửi dữ liệu đến LCD
void LCD_SendData(uint8_t data) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_PORT, RS_PIN, GPIO_PIN_SET);    // Chọn chế độ dữ liệu
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2101      	movs	r1, #1
 8000f22:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <LCD_SendData+0x40>)
 8000f24:	f000 fc25 	bl	8001772 <HAL_GPIO_WritePin>
    LCD_SendHalf(data >> 4);                              // Gửi 4 bit cao
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	091b      	lsrs	r3, r3, #4
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff82 	bl	8000e38 <LCD_SendHalf>
    LCD_Enable();
 8000f34:	f7ff ffb6 	bl	8000ea4 <LCD_Enable>
    LCD_SendHalf(data & 0x0F);                            // Gửi 4 bit thấp
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff79 	bl	8000e38 <LCD_SendHalf>
    LCD_Enable();
 8000f46:	f7ff ffad 	bl	8000ea4 <LCD_Enable>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40010800 	.word	0x40010800

08000f58 <LCD_Init>:

// Khởi tạo LCD
void LCD_Init(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
    HAL_Delay(100);  // Chờ LCD khởi động
 8000f5c:	2064      	movs	r0, #100	@ 0x64
 8000f5e:	f000 f965 	bl	800122c <HAL_Delay>

    // Gửi chuỗi khởi tạo LCD
    LCD_SendCmd(0x02);  // Chế độ 4-bit
 8000f62:	2002      	movs	r0, #2
 8000f64:	f7ff ffb4 	bl	8000ed0 <LCD_SendCmd>
    LCD_SendCmd(0x28);  // Giao diện 2 dòng, 5x7 matrix
 8000f68:	2028      	movs	r0, #40	@ 0x28
 8000f6a:	f7ff ffb1 	bl	8000ed0 <LCD_SendCmd>
    LCD_SendCmd(0x0C);  // Bật màn hình, tắt con trỏ
 8000f6e:	200c      	movs	r0, #12
 8000f70:	f7ff ffae 	bl	8000ed0 <LCD_SendCmd>
    LCD_SendCmd(0x06);  // Tăng địa chỉ con trỏ sau khi ghi
 8000f74:	2006      	movs	r0, #6
 8000f76:	f7ff ffab 	bl	8000ed0 <LCD_SendCmd>
    LCD_SendCmd(0x01);  // Xóa màn hình
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff ffa8 	bl	8000ed0 <LCD_SendCmd>
    HAL_Delay(10);
 8000f80:	200a      	movs	r0, #10
 8000f82:	f000 f953 	bl	800122c <HAL_Delay>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <LCD_Print>:

// Hiển thị chuỗi ký tự trên LCD
void LCD_Print(char *str) {
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000f92:	e006      	b.n	8000fa2 <LCD_Print+0x18>
        LCD_SendData(*str++);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ffb9 	bl	8000f14 <LCD_SendData>
    while (*str) {
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f4      	bne.n	8000f94 <LCD_Print+0xa>
    }
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <LCD_Clear>:

// Xóa màn hình LCD
void LCD_Clear(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    LCD_SendCmd(0x01);  // Lệnh xóa màn hình
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff ff89 	bl	8000ed0 <LCD_SendCmd>
    HAL_Delay(10);       // Đợi cho lệnh hoàn tất
 8000fbe:	200a      	movs	r0, #10
 8000fc0:	f000 f934 	bl	800122c <HAL_Delay>
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <LCD_SetCursor>:
void LCD_SetCursor(uint8_t row, uint8_t col) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
    uint8_t address;

    // Tính toán địa chỉ dựa trên hàng và cột
    if (row == 0) {
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d102      	bne.n	8000fe4 <LCD_SetCursor+0x1c>
        address = col;          // Hàng 1, bắt đầu từ địa chỉ 0x00
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e002      	b.n	8000fea <LCD_SetCursor+0x22>
    } else {
        address = 0x40 + col;   // Hàng 2, bắt đầu từ địa chỉ 0x40
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	3340      	adds	r3, #64	@ 0x40
 8000fe8:	73fb      	strb	r3, [r7, #15]
    }

    // Gửi lệnh di chuyển con trỏ
    LCD_SendCmd(0x80 | address);
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ff6c 	bl	8000ed0 <LCD_SendCmd>
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LCD_CursorBlink>:
// Gửi lệnh để bật con trỏ và làm nó nhấp nháy
void LCD_CursorBlink(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    LCD_SendCmd(0x0F); // Lệnh để bật màn hình, con trỏ và nhấp nháy
 8001004:	200f      	movs	r0, #15
 8001006:	f7ff ff63 	bl	8000ed0 <LCD_SendCmd>
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}

0800100e <LCD_DisableCursorBlink>:

// Gửi lệnh để tắt con trỏ nhấp nháy
void LCD_DisableCursorBlink(void) {
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
    LCD_SendCmd(0x0C); // Lệnh để tắt con trỏ và nhấp nháy
 8001012:	200c      	movs	r0, #12
 8001014:	f7ff ff5c 	bl	8000ed0 <LCD_SendCmd>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_MspInit+0x5c>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <HAL_MspInit+0x5c>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6193      	str	r3, [r2, #24]
 800102e:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <HAL_MspInit+0x5c>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <HAL_MspInit+0x5c>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a0e      	ldr	r2, [pc, #56]	@ (8001078 <HAL_MspInit+0x5c>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <HAL_MspInit+0x5c>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <HAL_MspInit+0x60>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	4a04      	ldr	r2, [pc, #16]	@ (800107c <HAL_MspInit+0x60>)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	40021000 	.word	0x40021000
 800107c:	40010000 	.word	0x40010000

08001080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001090:	d10b      	bne.n	80010aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001092:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <HAL_TIM_Base_MspInit+0x34>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a07      	ldr	r2, [pc, #28]	@ (80010b4 <HAL_TIM_Base_MspInit+0x34>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	61d3      	str	r3, [r2, #28]
 800109e:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <HAL_TIM_Base_MspInit+0x34>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	40021000 	.word	0x40021000

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <NMI_Handler+0x4>

080010c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <MemManage_Handler+0x4>

080010d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <UsageFault_Handler+0x4>

080010e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001108:	f000 f874 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800111c:	f7ff fff8 	bl	8001110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001120:	480b      	ldr	r0, [pc, #44]	@ (8001150 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001122:	490c      	ldr	r1, [pc, #48]	@ (8001154 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001124:	4a0c      	ldr	r2, [pc, #48]	@ (8001158 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a09      	ldr	r2, [pc, #36]	@ (800115c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001138:	4c09      	ldr	r4, [pc, #36]	@ (8001160 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001146:	f001 fa5f 	bl	8002608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114a:	f7ff f83f 	bl	80001cc <main>
  bx lr
 800114e:	4770      	bx	lr
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001158:	0800276c 	.word	0x0800276c
  ldr r2, =_sbss
 800115c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001160:	200000c8 	.word	0x200000c8

08001164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC1_2_IRQHandler>
	...

08001168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <HAL_Init+0x28>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	@ (8001190 <HAL_Init+0x28>)
 8001172:	f043 0310 	orr.w	r3, r3, #16
 8001176:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f92b 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117e:	200f      	movs	r0, #15
 8001180:	f000 f808 	bl	8001194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001184:	f7ff ff4a 	bl	800101c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_InitTick+0x54>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <HAL_InitTick+0x58>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f935 	bl	8001422 <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 f90b 	bl	80013ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <HAL_InitTick+0x5c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000024 	.word	0x20000024
 80011ec:	2000002c 	.word	0x2000002c
 80011f0:	20000028 	.word	0x20000028

080011f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <HAL_IncTick+0x1c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <HAL_IncTick+0x20>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a03      	ldr	r2, [pc, #12]	@ (8001214 <HAL_IncTick+0x20>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	2000002c 	.word	0x2000002c
 8001214:	200000c4 	.word	0x200000c4

08001218 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b02      	ldr	r3, [pc, #8]	@ (8001228 <HAL_GetTick+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	200000c4 	.word	0x200000c4

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fff0 	bl	8001218 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_Delay+0x44>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffe0 	bl	8001218 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000002c 	.word	0x2000002c

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800129c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	@ (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	@ (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	@ 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	@ 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f7ff ff90 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff49 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013fc:	f7ff ff5e 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f7ff ff90 	bl	800132c <NVIC_EncodePriority>
 800140c:	4602      	mov	r2, r0
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff5f 	bl	80012d8 <__NVIC_SetPriority>
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ffb0 	bl	8001390 <SysTick_Config>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b08b      	sub	sp, #44	@ 0x2c
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144e:	e169      	b.n	8001724 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001450:	2201      	movs	r2, #1
 8001452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8158 	bne.w	800171e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a9a      	ldr	r2, [pc, #616]	@ (80016dc <HAL_GPIO_Init+0x2a0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d05e      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001478:	4a98      	ldr	r2, [pc, #608]	@ (80016dc <HAL_GPIO_Init+0x2a0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d875      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 800147e:	4a98      	ldr	r2, [pc, #608]	@ (80016e0 <HAL_GPIO_Init+0x2a4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d058      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001484:	4a96      	ldr	r2, [pc, #600]	@ (80016e0 <HAL_GPIO_Init+0x2a4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d86f      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 800148a:	4a96      	ldr	r2, [pc, #600]	@ (80016e4 <HAL_GPIO_Init+0x2a8>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d052      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001490:	4a94      	ldr	r2, [pc, #592]	@ (80016e4 <HAL_GPIO_Init+0x2a8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d869      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 8001496:	4a94      	ldr	r2, [pc, #592]	@ (80016e8 <HAL_GPIO_Init+0x2ac>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d04c      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 800149c:	4a92      	ldr	r2, [pc, #584]	@ (80016e8 <HAL_GPIO_Init+0x2ac>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d863      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014a2:	4a92      	ldr	r2, [pc, #584]	@ (80016ec <HAL_GPIO_Init+0x2b0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d046      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 80014a8:	4a90      	ldr	r2, [pc, #576]	@ (80016ec <HAL_GPIO_Init+0x2b0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d85d      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014ae:	2b12      	cmp	r3, #18
 80014b0:	d82a      	bhi.n	8001508 <HAL_GPIO_Init+0xcc>
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d859      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014b6:	a201      	add	r2, pc, #4	@ (adr r2, 80014bc <HAL_GPIO_Init+0x80>)
 80014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014bc:	08001537 	.word	0x08001537
 80014c0:	08001511 	.word	0x08001511
 80014c4:	08001523 	.word	0x08001523
 80014c8:	08001565 	.word	0x08001565
 80014cc:	0800156b 	.word	0x0800156b
 80014d0:	0800156b 	.word	0x0800156b
 80014d4:	0800156b 	.word	0x0800156b
 80014d8:	0800156b 	.word	0x0800156b
 80014dc:	0800156b 	.word	0x0800156b
 80014e0:	0800156b 	.word	0x0800156b
 80014e4:	0800156b 	.word	0x0800156b
 80014e8:	0800156b 	.word	0x0800156b
 80014ec:	0800156b 	.word	0x0800156b
 80014f0:	0800156b 	.word	0x0800156b
 80014f4:	0800156b 	.word	0x0800156b
 80014f8:	0800156b 	.word	0x0800156b
 80014fc:	0800156b 	.word	0x0800156b
 8001500:	08001519 	.word	0x08001519
 8001504:	0800152d 	.word	0x0800152d
 8001508:	4a79      	ldr	r2, [pc, #484]	@ (80016f0 <HAL_GPIO_Init+0x2b4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d013      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800150e:	e02c      	b.n	800156a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e029      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	3304      	adds	r3, #4
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	e024      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	3308      	adds	r3, #8
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e01f      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	330c      	adds	r3, #12
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e01a      	b.n	800156c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800153e:	2304      	movs	r3, #4
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e013      	b.n	800156c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d105      	bne.n	8001558 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800154c:	2308      	movs	r3, #8
 800154e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	611a      	str	r2, [r3, #16]
          break;
 8001556:	e009      	b.n	800156c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001558:	2308      	movs	r3, #8
 800155a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	615a      	str	r2, [r3, #20]
          break;
 8001562:	e003      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x130>
          break;
 800156a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2bff      	cmp	r3, #255	@ 0xff
 8001570:	d801      	bhi.n	8001576 <HAL_GPIO_Init+0x13a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	e001      	b.n	800157a <HAL_GPIO_Init+0x13e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3304      	adds	r3, #4
 800157a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2bff      	cmp	r3, #255	@ 0xff
 8001580:	d802      	bhi.n	8001588 <HAL_GPIO_Init+0x14c>
 8001582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	e002      	b.n	800158e <HAL_GPIO_Init+0x152>
 8001588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158a:	3b08      	subs	r3, #8
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	210f      	movs	r1, #15
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	401a      	ands	r2, r3
 80015a0:	6a39      	ldr	r1, [r7, #32]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	431a      	orrs	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 80b1 	beq.w	800171e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015bc:	4b4d      	ldr	r3, [pc, #308]	@ (80016f4 <HAL_GPIO_Init+0x2b8>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a4c      	ldr	r2, [pc, #304]	@ (80016f4 <HAL_GPIO_Init+0x2b8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b4a      	ldr	r3, [pc, #296]	@ (80016f4 <HAL_GPIO_Init+0x2b8>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015d4:	4a48      	ldr	r2, [pc, #288]	@ (80016f8 <HAL_GPIO_Init+0x2bc>)
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	3302      	adds	r3, #2
 80015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	220f      	movs	r2, #15
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4013      	ands	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a40      	ldr	r2, [pc, #256]	@ (80016fc <HAL_GPIO_Init+0x2c0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d013      	beq.n	8001628 <HAL_GPIO_Init+0x1ec>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3f      	ldr	r2, [pc, #252]	@ (8001700 <HAL_GPIO_Init+0x2c4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d00d      	beq.n	8001624 <HAL_GPIO_Init+0x1e8>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a3e      	ldr	r2, [pc, #248]	@ (8001704 <HAL_GPIO_Init+0x2c8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d007      	beq.n	8001620 <HAL_GPIO_Init+0x1e4>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a3d      	ldr	r2, [pc, #244]	@ (8001708 <HAL_GPIO_Init+0x2cc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d101      	bne.n	800161c <HAL_GPIO_Init+0x1e0>
 8001618:	2303      	movs	r3, #3
 800161a:	e006      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 800161c:	2304      	movs	r3, #4
 800161e:	e004      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001620:	2302      	movs	r3, #2
 8001622:	e002      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001628:	2300      	movs	r3, #0
 800162a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800162c:	f002 0203 	and.w	r2, r2, #3
 8001630:	0092      	lsls	r2, r2, #2
 8001632:	4093      	lsls	r3, r2
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800163a:	492f      	ldr	r1, [pc, #188]	@ (80016f8 <HAL_GPIO_Init+0x2bc>)
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001654:	4b2d      	ldr	r3, [pc, #180]	@ (800170c <HAL_GPIO_Init+0x2d0>)
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	492c      	ldr	r1, [pc, #176]	@ (800170c <HAL_GPIO_Init+0x2d0>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	608b      	str	r3, [r1, #8]
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001662:	4b2a      	ldr	r3, [pc, #168]	@ (800170c <HAL_GPIO_Init+0x2d0>)
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	43db      	mvns	r3, r3
 800166a:	4928      	ldr	r1, [pc, #160]	@ (800170c <HAL_GPIO_Init+0x2d0>)
 800166c:	4013      	ands	r3, r2
 800166e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d006      	beq.n	800168a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800167c:	4b23      	ldr	r3, [pc, #140]	@ (800170c <HAL_GPIO_Init+0x2d0>)
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	4922      	ldr	r1, [pc, #136]	@ (800170c <HAL_GPIO_Init+0x2d0>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	60cb      	str	r3, [r1, #12]
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800168a:	4b20      	ldr	r3, [pc, #128]	@ (800170c <HAL_GPIO_Init+0x2d0>)
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	43db      	mvns	r3, r3
 8001692:	491e      	ldr	r1, [pc, #120]	@ (800170c <HAL_GPIO_Init+0x2d0>)
 8001694:	4013      	ands	r3, r2
 8001696:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016a4:	4b19      	ldr	r3, [pc, #100]	@ (800170c <HAL_GPIO_Init+0x2d0>)
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4918      	ldr	r1, [pc, #96]	@ (800170c <HAL_GPIO_Init+0x2d0>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016b2:	4b16      	ldr	r3, [pc, #88]	@ (800170c <HAL_GPIO_Init+0x2d0>)
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4914      	ldr	r1, [pc, #80]	@ (800170c <HAL_GPIO_Init+0x2d0>)
 80016bc:	4013      	ands	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d021      	beq.n	8001710 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <HAL_GPIO_Init+0x2d0>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	490e      	ldr	r1, [pc, #56]	@ (800170c <HAL_GPIO_Init+0x2d0>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]
 80016d8:	e021      	b.n	800171e <HAL_GPIO_Init+0x2e2>
 80016da:	bf00      	nop
 80016dc:	10320000 	.word	0x10320000
 80016e0:	10310000 	.word	0x10310000
 80016e4:	10220000 	.word	0x10220000
 80016e8:	10210000 	.word	0x10210000
 80016ec:	10120000 	.word	0x10120000
 80016f0:	10110000 	.word	0x10110000
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010000 	.word	0x40010000
 80016fc:	40010800 	.word	0x40010800
 8001700:	40010c00 	.word	0x40010c00
 8001704:	40011000 	.word	0x40011000
 8001708:	40011400 	.word	0x40011400
 800170c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001710:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <HAL_GPIO_Init+0x304>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	43db      	mvns	r3, r3
 8001718:	4909      	ldr	r1, [pc, #36]	@ (8001740 <HAL_GPIO_Init+0x304>)
 800171a:	4013      	ands	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	3301      	adds	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172a:	fa22 f303 	lsr.w	r3, r2, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	f47f ae8e 	bne.w	8001450 <HAL_GPIO_Init+0x14>
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	372c      	adds	r7, #44	@ 0x2c
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e001      	b.n	8001766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	807b      	strh	r3, [r7, #2]
 800177e:	4613      	mov	r3, r2
 8001780:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001782:	787b      	ldrb	r3, [r7, #1]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001788:	887a      	ldrh	r2, [r7, #2]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800178e:	e003      	b.n	8001798 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001790:	887b      	ldrh	r3, [r7, #2]
 8001792:	041a      	lsls	r2, r3, #16
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	611a      	str	r2, [r3, #16]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
	...

080017a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e272      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8087 	beq.w	80018d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c4:	4b92      	ldr	r3, [pc, #584]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d00c      	beq.n	80017ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017d0:	4b8f      	ldr	r3, [pc, #572]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d112      	bne.n	8001802 <HAL_RCC_OscConfig+0x5e>
 80017dc:	4b8c      	ldr	r3, [pc, #560]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017e8:	d10b      	bne.n	8001802 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ea:	4b89      	ldr	r3, [pc, #548]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d06c      	beq.n	80018d0 <HAL_RCC_OscConfig+0x12c>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d168      	bne.n	80018d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e24c      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x76>
 800180c:	4b80      	ldr	r3, [pc, #512]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a7f      	ldr	r2, [pc, #508]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e02e      	b.n	8001878 <HAL_RCC_OscConfig+0xd4>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x98>
 8001822:	4b7b      	ldr	r3, [pc, #492]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7a      	ldr	r2, [pc, #488]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b78      	ldr	r3, [pc, #480]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a77      	ldr	r2, [pc, #476]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001834:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0xd4>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0xbc>
 8001846:	4b72      	ldr	r3, [pc, #456]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a71      	ldr	r2, [pc, #452]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b6f      	ldr	r3, [pc, #444]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a6e      	ldr	r2, [pc, #440]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0xd4>
 8001860:	4b6b      	ldr	r3, [pc, #428]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a6a      	ldr	r2, [pc, #424]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b68      	ldr	r3, [pc, #416]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a67      	ldr	r2, [pc, #412]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001876:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fcca 	bl	8001218 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fcc6 	bl	8001218 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	@ 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e200      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0xe4>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fcb6 	bl	8001218 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fcb2 	bl	8001218 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	@ 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e1ec      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c2:	4b53      	ldr	r3, [pc, #332]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x10c>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d063      	beq.n	80019a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018de:	4b4c      	ldr	r3, [pc, #304]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00b      	beq.n	8001902 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ea:	4b49      	ldr	r3, [pc, #292]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d11c      	bne.n	8001930 <HAL_RCC_OscConfig+0x18c>
 80018f6:	4b46      	ldr	r3, [pc, #280]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d116      	bne.n	8001930 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	4b43      	ldr	r3, [pc, #268]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x176>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d001      	beq.n	800191a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e1c0      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4939      	ldr	r1, [pc, #228]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	e03a      	b.n	80019a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d020      	beq.n	800197a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001938:	4b36      	ldr	r3, [pc, #216]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff fc6b 	bl	8001218 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff fc67 	bl	8001218 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e1a1      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	4b2a      	ldr	r3, [pc, #168]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4927      	ldr	r1, [pc, #156]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
 8001978:	e015      	b.n	80019a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197a:	4b26      	ldr	r3, [pc, #152]	@ (8001a14 <HAL_RCC_OscConfig+0x270>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fc4a 	bl	8001218 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001988:	f7ff fc46 	bl	8001218 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e180      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d03a      	beq.n	8001a28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d019      	beq.n	80019ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ba:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c0:	f7ff fc2a 	bl	8001218 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c8:	f7ff fc26 	bl	8001218 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e160      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f000 fa9c 	bl	8001f24 <RCC_Delay>
 80019ec:	e01c      	b.n	8001a28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f4:	f7ff fc10 	bl	8001218 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fa:	e00f      	b.n	8001a1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fc:	f7ff fc0c 	bl	8001218 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d908      	bls.n	8001a1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e146      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	42420000 	.word	0x42420000
 8001a18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1c:	4b92      	ldr	r3, [pc, #584]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1e9      	bne.n	80019fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80a6 	beq.w	8001b82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10d      	bne.n	8001a62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	4b88      	ldr	r3, [pc, #544]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a87      	ldr	r2, [pc, #540]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a50:	61d3      	str	r3, [r2, #28]
 8001a52:	4b85      	ldr	r3, [pc, #532]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a62:	4b82      	ldr	r3, [pc, #520]	@ (8001c6c <HAL_RCC_OscConfig+0x4c8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d118      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c6c <HAL_RCC_OscConfig+0x4c8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a7e      	ldr	r2, [pc, #504]	@ (8001c6c <HAL_RCC_OscConfig+0x4c8>)
 8001a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fbcd 	bl	8001218 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a82:	f7ff fbc9 	bl	8001218 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b64      	cmp	r3, #100	@ 0x64
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e103      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a94:	4b75      	ldr	r3, [pc, #468]	@ (8001c6c <HAL_RCC_OscConfig+0x4c8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x312>
 8001aa8:	4b6f      	ldr	r3, [pc, #444]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4a6e      	ldr	r2, [pc, #440]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6213      	str	r3, [r2, #32]
 8001ab4:	e02d      	b.n	8001b12 <HAL_RCC_OscConfig+0x36e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x334>
 8001abe:	4b6a      	ldr	r3, [pc, #424]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	4a69      	ldr	r2, [pc, #420]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6213      	str	r3, [r2, #32]
 8001aca:	4b67      	ldr	r3, [pc, #412]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a66      	ldr	r2, [pc, #408]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	f023 0304 	bic.w	r3, r3, #4
 8001ad4:	6213      	str	r3, [r2, #32]
 8001ad6:	e01c      	b.n	8001b12 <HAL_RCC_OscConfig+0x36e>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	d10c      	bne.n	8001afa <HAL_RCC_OscConfig+0x356>
 8001ae0:	4b61      	ldr	r3, [pc, #388]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4a60      	ldr	r2, [pc, #384]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	6213      	str	r3, [r2, #32]
 8001aec:	4b5e      	ldr	r3, [pc, #376]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6213      	str	r3, [r2, #32]
 8001af8:	e00b      	b.n	8001b12 <HAL_RCC_OscConfig+0x36e>
 8001afa:	4b5b      	ldr	r3, [pc, #364]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4a5a      	ldr	r2, [pc, #360]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	6213      	str	r3, [r2, #32]
 8001b06:	4b58      	ldr	r3, [pc, #352]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	4a57      	ldr	r2, [pc, #348]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	f023 0304 	bic.w	r3, r3, #4
 8001b10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d015      	beq.n	8001b46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff fb7d 	bl	8001218 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7ff fb79 	bl	8001218 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e0b1      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	4b4b      	ldr	r3, [pc, #300]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0ee      	beq.n	8001b22 <HAL_RCC_OscConfig+0x37e>
 8001b44:	e014      	b.n	8001b70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b46:	f7ff fb67 	bl	8001218 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4c:	e00a      	b.n	8001b64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4e:	f7ff fb63 	bl	8001218 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e09b      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b64:	4b40      	ldr	r3, [pc, #256]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1ee      	bne.n	8001b4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b70:	7dfb      	ldrb	r3, [r7, #23]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d105      	bne.n	8001b82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b76:	4b3c      	ldr	r3, [pc, #240]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 8087 	beq.w	8001c9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b8c:	4b36      	ldr	r3, [pc, #216]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d061      	beq.n	8001c5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d146      	bne.n	8001c2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba0:	4b33      	ldr	r3, [pc, #204]	@ (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fb37 	bl	8001218 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff fb33 	bl	8001218 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e06d      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc0:	4b29      	ldr	r3, [pc, #164]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f0      	bne.n	8001bae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd4:	d108      	bne.n	8001be8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bd6:	4b24      	ldr	r3, [pc, #144]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	4921      	ldr	r1, [pc, #132]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a19      	ldr	r1, [r3, #32]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	491b      	ldr	r1, [pc, #108]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c00:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fb07 	bl	8001218 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7ff fb03 	bl	8001218 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e03d      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x46a>
 8001c2c:	e035      	b.n	8001c9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <HAL_RCC_OscConfig+0x4cc>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff faf0 	bl	8001218 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff faec 	bl	8001218 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e026      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x498>
 8001c5a:	e01e      	b.n	8001c9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e019      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40007000 	.word	0x40007000
 8001c70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <HAL_RCC_OscConfig+0x500>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0d0      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d910      	bls.n	8001cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b67      	ldr	r3, [pc, #412]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 0207 	bic.w	r2, r3, #7
 8001cd2:	4965      	ldr	r1, [pc, #404]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b63      	ldr	r3, [pc, #396]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0b8      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d04:	4b59      	ldr	r3, [pc, #356]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a58      	ldr	r2, [pc, #352]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d1c:	4b53      	ldr	r3, [pc, #332]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	4a52      	ldr	r2, [pc, #328]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d28:	4b50      	ldr	r3, [pc, #320]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	494d      	ldr	r1, [pc, #308]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d040      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b47      	ldr	r3, [pc, #284]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d115      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e07f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d66:	4b41      	ldr	r3, [pc, #260]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e073      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	4b3d      	ldr	r3, [pc, #244]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e06b      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d86:	4b39      	ldr	r3, [pc, #228]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f023 0203 	bic.w	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4936      	ldr	r1, [pc, #216]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d98:	f7ff fa3e 	bl	8001218 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da0:	f7ff fa3a 	bl	8001218 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e053      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 020c 	and.w	r2, r3, #12
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1eb      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b27      	ldr	r3, [pc, #156]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d210      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	4922      	ldr	r1, [pc, #136]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e032      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4916      	ldr	r1, [pc, #88]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	490e      	ldr	r1, [pc, #56]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e36:	f000 f821 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	490a      	ldr	r1, [pc, #40]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e48:	5ccb      	ldrb	r3, [r1, r3]
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	4a09      	ldr	r2, [pc, #36]	@ (8001e74 <HAL_RCC_ClockConfig+0x1cc>)
 8001e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e52:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <HAL_RCC_ClockConfig+0x1d0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f99c 	bl	8001194 <HAL_InitTick>

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08002740 	.word	0x08002740
 8001e74:	20000024 	.word	0x20000024
 8001e78:	20000028 	.word	0x20000028

08001e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	2300      	movs	r3, #0
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d002      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x30>
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d003      	beq.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eaa:	e027      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eac:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eae:	613b      	str	r3, [r7, #16]
      break;
 8001eb0:	e027      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	0c9b      	lsrs	r3, r3, #18
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	4a17      	ldr	r2, [pc, #92]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ebc:	5cd3      	ldrb	r3, [r2, r3]
 8001ebe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d010      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eca:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	0c5b      	lsrs	r3, r3, #17
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	4a11      	ldr	r2, [pc, #68]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ede:	fb03 f202 	mul.w	r2, r3, r2
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	e004      	b.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a0c      	ldr	r2, [pc, #48]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ef0:	fb02 f303 	mul.w	r3, r2, r3
 8001ef4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	613b      	str	r3, [r7, #16]
      break;
 8001efa:	e002      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001efc:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001efe:	613b      	str	r3, [r7, #16]
      break;
 8001f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f02:	693b      	ldr	r3, [r7, #16]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	007a1200 	.word	0x007a1200
 8001f18:	08002750 	.word	0x08002750
 8001f1c:	08002760 	.word	0x08002760
 8001f20:	003d0900 	.word	0x003d0900

08001f24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <RCC_Delay+0x34>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <RCC_Delay+0x38>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	0a5b      	lsrs	r3, r3, #9
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f40:	bf00      	nop
  }
  while (Delay --);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1e5a      	subs	r2, r3, #1
 8001f46:	60fa      	str	r2, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f9      	bne.n	8001f40 <RCC_Delay+0x1c>
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	20000024 	.word	0x20000024
 8001f5c:	10624dd3 	.word	0x10624dd3

08001f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e041      	b.n	8001ff6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff f87a 	bl	8001080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f000 f936 	bl	8002210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_TIM_ConfigClockSource+0x1c>
 8002016:	2302      	movs	r3, #2
 8002018:	e0b4      	b.n	8002184 <HAL_TIM_ConfigClockSource+0x186>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002038:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002040:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002052:	d03e      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0xd4>
 8002054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002058:	f200 8087 	bhi.w	800216a <HAL_TIM_ConfigClockSource+0x16c>
 800205c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002060:	f000 8086 	beq.w	8002170 <HAL_TIM_ConfigClockSource+0x172>
 8002064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002068:	d87f      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
 800206a:	2b70      	cmp	r3, #112	@ 0x70
 800206c:	d01a      	beq.n	80020a4 <HAL_TIM_ConfigClockSource+0xa6>
 800206e:	2b70      	cmp	r3, #112	@ 0x70
 8002070:	d87b      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
 8002072:	2b60      	cmp	r3, #96	@ 0x60
 8002074:	d050      	beq.n	8002118 <HAL_TIM_ConfigClockSource+0x11a>
 8002076:	2b60      	cmp	r3, #96	@ 0x60
 8002078:	d877      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
 800207a:	2b50      	cmp	r3, #80	@ 0x50
 800207c:	d03c      	beq.n	80020f8 <HAL_TIM_ConfigClockSource+0xfa>
 800207e:	2b50      	cmp	r3, #80	@ 0x50
 8002080:	d873      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
 8002082:	2b40      	cmp	r3, #64	@ 0x40
 8002084:	d058      	beq.n	8002138 <HAL_TIM_ConfigClockSource+0x13a>
 8002086:	2b40      	cmp	r3, #64	@ 0x40
 8002088:	d86f      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
 800208a:	2b30      	cmp	r3, #48	@ 0x30
 800208c:	d064      	beq.n	8002158 <HAL_TIM_ConfigClockSource+0x15a>
 800208e:	2b30      	cmp	r3, #48	@ 0x30
 8002090:	d86b      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
 8002092:	2b20      	cmp	r3, #32
 8002094:	d060      	beq.n	8002158 <HAL_TIM_ConfigClockSource+0x15a>
 8002096:	2b20      	cmp	r3, #32
 8002098:	d867      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
 800209a:	2b00      	cmp	r3, #0
 800209c:	d05c      	beq.n	8002158 <HAL_TIM_ConfigClockSource+0x15a>
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d05a      	beq.n	8002158 <HAL_TIM_ConfigClockSource+0x15a>
 80020a2:	e062      	b.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020b4:	f000 fa22 	bl	80024fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80020c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	609a      	str	r2, [r3, #8]
      break;
 80020d0:	e04f      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020e2:	f000 fa0b 	bl	80024fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020f4:	609a      	str	r2, [r3, #8]
      break;
 80020f6:	e03c      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002104:	461a      	mov	r2, r3
 8002106:	f000 f982 	bl	800240e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2150      	movs	r1, #80	@ 0x50
 8002110:	4618      	mov	r0, r3
 8002112:	f000 f9d9 	bl	80024c8 <TIM_ITRx_SetConfig>
      break;
 8002116:	e02c      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002124:	461a      	mov	r2, r3
 8002126:	f000 f9a0 	bl	800246a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2160      	movs	r1, #96	@ 0x60
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f9c9 	bl	80024c8 <TIM_ITRx_SetConfig>
      break;
 8002136:	e01c      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002144:	461a      	mov	r2, r3
 8002146:	f000 f962 	bl	800240e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2140      	movs	r1, #64	@ 0x40
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f9b9 	bl	80024c8 <TIM_ITRx_SetConfig>
      break;
 8002156:	e00c      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	4610      	mov	r0, r2
 8002164:	f000 f9b0 	bl	80024c8 <TIM_ITRx_SetConfig>
      break;
 8002168:	e003      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
      break;
 800216e:	e000      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002170:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e031      	b.n	8002208 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80021b4:	6839      	ldr	r1, [r7, #0]
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f898 	bl	80022ec <TIM_SlaveTimer_SetConfig>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d009      	beq.n	80021d6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e018      	b.n	8002208 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021e4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80021f4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a2f      	ldr	r2, [pc, #188]	@ (80022e0 <TIM_Base_SetConfig+0xd0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00b      	beq.n	8002240 <TIM_Base_SetConfig+0x30>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800222e:	d007      	beq.n	8002240 <TIM_Base_SetConfig+0x30>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a2c      	ldr	r2, [pc, #176]	@ (80022e4 <TIM_Base_SetConfig+0xd4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d003      	beq.n	8002240 <TIM_Base_SetConfig+0x30>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a2b      	ldr	r2, [pc, #172]	@ (80022e8 <TIM_Base_SetConfig+0xd8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d108      	bne.n	8002252 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a22      	ldr	r2, [pc, #136]	@ (80022e0 <TIM_Base_SetConfig+0xd0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00b      	beq.n	8002272 <TIM_Base_SetConfig+0x62>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002260:	d007      	beq.n	8002272 <TIM_Base_SetConfig+0x62>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a1f      	ldr	r2, [pc, #124]	@ (80022e4 <TIM_Base_SetConfig+0xd4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d003      	beq.n	8002272 <TIM_Base_SetConfig+0x62>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a1e      	ldr	r2, [pc, #120]	@ (80022e8 <TIM_Base_SetConfig+0xd8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d108      	bne.n	8002284 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a0d      	ldr	r2, [pc, #52]	@ (80022e0 <TIM_Base_SetConfig+0xd0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d103      	bne.n	80022b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f023 0201 	bic.w	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	611a      	str	r2, [r3, #16]
  }
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40000800 	.word	0x40000800

080022ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002308:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f023 0307 	bic.w	r3, r3, #7
 800231a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b70      	cmp	r3, #112	@ 0x70
 8002334:	d01a      	beq.n	800236c <TIM_SlaveTimer_SetConfig+0x80>
 8002336:	2b70      	cmp	r3, #112	@ 0x70
 8002338:	d860      	bhi.n	80023fc <TIM_SlaveTimer_SetConfig+0x110>
 800233a:	2b60      	cmp	r3, #96	@ 0x60
 800233c:	d054      	beq.n	80023e8 <TIM_SlaveTimer_SetConfig+0xfc>
 800233e:	2b60      	cmp	r3, #96	@ 0x60
 8002340:	d85c      	bhi.n	80023fc <TIM_SlaveTimer_SetConfig+0x110>
 8002342:	2b50      	cmp	r3, #80	@ 0x50
 8002344:	d046      	beq.n	80023d4 <TIM_SlaveTimer_SetConfig+0xe8>
 8002346:	2b50      	cmp	r3, #80	@ 0x50
 8002348:	d858      	bhi.n	80023fc <TIM_SlaveTimer_SetConfig+0x110>
 800234a:	2b40      	cmp	r3, #64	@ 0x40
 800234c:	d019      	beq.n	8002382 <TIM_SlaveTimer_SetConfig+0x96>
 800234e:	2b40      	cmp	r3, #64	@ 0x40
 8002350:	d854      	bhi.n	80023fc <TIM_SlaveTimer_SetConfig+0x110>
 8002352:	2b30      	cmp	r3, #48	@ 0x30
 8002354:	d055      	beq.n	8002402 <TIM_SlaveTimer_SetConfig+0x116>
 8002356:	2b30      	cmp	r3, #48	@ 0x30
 8002358:	d850      	bhi.n	80023fc <TIM_SlaveTimer_SetConfig+0x110>
 800235a:	2b20      	cmp	r3, #32
 800235c:	d051      	beq.n	8002402 <TIM_SlaveTimer_SetConfig+0x116>
 800235e:	2b20      	cmp	r3, #32
 8002360:	d84c      	bhi.n	80023fc <TIM_SlaveTimer_SetConfig+0x110>
 8002362:	2b00      	cmp	r3, #0
 8002364:	d04d      	beq.n	8002402 <TIM_SlaveTimer_SetConfig+0x116>
 8002366:	2b10      	cmp	r3, #16
 8002368:	d04b      	beq.n	8002402 <TIM_SlaveTimer_SetConfig+0x116>
 800236a:	e047      	b.n	80023fc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800237c:	f000 f8be 	bl	80024fc <TIM_ETR_SetConfig>
      break;
 8002380:	e040      	b.n	8002404 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b05      	cmp	r3, #5
 8002388:	d101      	bne.n	800238e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e03b      	b.n	8002406 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0201 	bic.w	r2, r2, #1
 80023a4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023b4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	621a      	str	r2, [r3, #32]
      break;
 80023d2:	e017      	b.n	8002404 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e0:	461a      	mov	r2, r3
 80023e2:	f000 f814 	bl	800240e <TIM_TI1_ConfigInputStage>
      break;
 80023e6:	e00d      	b.n	8002404 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023f4:	461a      	mov	r2, r3
 80023f6:	f000 f838 	bl	800246a <TIM_TI2_ConfigInputStage>
      break;
 80023fa:	e003      	b.n	8002404 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002400:	e000      	b.n	8002404 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002402:	bf00      	nop
  }

  return status;
 8002404:	7dfb      	ldrb	r3, [r7, #23]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800240e:	b480      	push	{r7}
 8002410:	b087      	sub	sp, #28
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f023 0201 	bic.w	r2, r3, #1
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f023 030a 	bic.w	r3, r3, #10
 800244a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	621a      	str	r2, [r3, #32]
}
 8002460:	bf00      	nop
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800246a:	b480      	push	{r7}
 800246c:	b087      	sub	sp, #28
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f023 0210 	bic.w	r2, r3, #16
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	031b      	lsls	r3, r3, #12
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80024a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	621a      	str	r2, [r3, #32]
}
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f043 0307 	orr.w	r3, r3, #7
 80024ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	609a      	str	r2, [r3, #8]
}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	021a      	lsls	r2, r3, #8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	431a      	orrs	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4313      	orrs	r3, r2
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	609a      	str	r2, [r3, #8]
}
 8002530:	bf00      	nop
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
	...

0800253c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002550:	2302      	movs	r3, #2
 8002552:	e046      	b.n	80025e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800257a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a16      	ldr	r2, [pc, #88]	@ (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d00e      	beq.n	80025b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a0:	d009      	beq.n	80025b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a12      	ldr	r2, [pc, #72]	@ (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d004      	beq.n	80025b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a10      	ldr	r2, [pc, #64]	@ (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d10c      	bne.n	80025d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40000800 	.word	0x40000800

080025f8 <memset>:
 80025f8:	4603      	mov	r3, r0
 80025fa:	4402      	add	r2, r0
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d100      	bne.n	8002602 <memset+0xa>
 8002600:	4770      	bx	lr
 8002602:	f803 1b01 	strb.w	r1, [r3], #1
 8002606:	e7f9      	b.n	80025fc <memset+0x4>

08002608 <__libc_init_array>:
 8002608:	b570      	push	{r4, r5, r6, lr}
 800260a:	2600      	movs	r6, #0
 800260c:	4d0c      	ldr	r5, [pc, #48]	@ (8002640 <__libc_init_array+0x38>)
 800260e:	4c0d      	ldr	r4, [pc, #52]	@ (8002644 <__libc_init_array+0x3c>)
 8002610:	1b64      	subs	r4, r4, r5
 8002612:	10a4      	asrs	r4, r4, #2
 8002614:	42a6      	cmp	r6, r4
 8002616:	d109      	bne.n	800262c <__libc_init_array+0x24>
 8002618:	f000 f81a 	bl	8002650 <_init>
 800261c:	2600      	movs	r6, #0
 800261e:	4d0a      	ldr	r5, [pc, #40]	@ (8002648 <__libc_init_array+0x40>)
 8002620:	4c0a      	ldr	r4, [pc, #40]	@ (800264c <__libc_init_array+0x44>)
 8002622:	1b64      	subs	r4, r4, r5
 8002624:	10a4      	asrs	r4, r4, #2
 8002626:	42a6      	cmp	r6, r4
 8002628:	d105      	bne.n	8002636 <__libc_init_array+0x2e>
 800262a:	bd70      	pop	{r4, r5, r6, pc}
 800262c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002630:	4798      	blx	r3
 8002632:	3601      	adds	r6, #1
 8002634:	e7ee      	b.n	8002614 <__libc_init_array+0xc>
 8002636:	f855 3b04 	ldr.w	r3, [r5], #4
 800263a:	4798      	blx	r3
 800263c:	3601      	adds	r6, #1
 800263e:	e7f2      	b.n	8002626 <__libc_init_array+0x1e>
 8002640:	08002764 	.word	0x08002764
 8002644:	08002764 	.word	0x08002764
 8002648:	08002764 	.word	0x08002764
 800264c:	08002768 	.word	0x08002768

08002650 <_init>:
 8002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002652:	bf00      	nop
 8002654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002656:	bc08      	pop	{r3}
 8002658:	469e      	mov	lr, r3
 800265a:	4770      	bx	lr

0800265c <_fini>:
 800265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265e:	bf00      	nop
 8002660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002662:	bc08      	pop	{r3}
 8002664:	469e      	mov	lr, r3
 8002666:	4770      	bx	lr
